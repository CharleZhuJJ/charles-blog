import{_ as t}from"./chunks/ArticleMetadata.4c626a83.js";import{_ as r,D as c,o as l,c as y,G as i,B as A,z as p,a as D,R as C,A as g,C as B}from"./chunks/framework.ef995079.js";const d="/charles-blog/assets/Conditional.2b7d57de.png",k=JSON.parse('{"title":"SpringBoot","description":"","frontmatter":{},"headers":[],"relativePath":"md/Java/Spring/SpringBoot.md","filePath":"md/Java/Spring/SpringBoot.md","lastUpdated":1688459773000}'),u={name:"md/Java/Spring/SpringBoot.md"},F=p("h1",{id:"springboot",tabindex:"-1"},[D("SpringBoot "),p("a",{class:"header-anchor",href:"#springboot","aria-label":'Permalink to "SpringBoot"'},"​")],-1),E=C(`<h2 id="springboot-的-starters-场景启动器" tabindex="-1">SpringBoot 的 starters（场景启动器） <a class="header-anchor" href="#springboot-的-starters-场景启动器" aria-label="Permalink to &quot;SpringBoot 的 starters（场景启动器）&quot;">​</a></h2><p>  Spring Boot 通过将我们常用的功能场景抽取出来，做成的一系列场景启动器，这些启动器帮我们导入了实现各个功能所需要依赖的全部组件，我们只需要在项目中引入这些 starters，相关场景的所有依赖就会全部被导入进来，并且我们可以抛弃繁杂的配置，仅需要通过配置文件来进行少量的配置就可以使用相应的功能。</p><h2 id="自动装配" tabindex="-1">自动装配 <a class="header-anchor" href="#自动装配" aria-label="Permalink to &quot;自动装配&quot;">​</a></h2><p>  SpringBoot 定义了一套接口规范，这套规范规定：SpringBoot 在启动时会扫描外部引用 jar 包中的 META-INF/spring.factories 文件，将文件中配置的类型信息加载到 Spring 容器，并执行类中定义的各种操作。对于外部 jar 来说，只需要按照 SpringBoot 定义的标准，就能将自己的功能装置进 SpringBoot。</p><p>  具体实现：</p><ol><li>SpringBoot 的核心注解@SpringBootApplication，其包含了@EnableAutoConfiguration 注解，启用 SpringBoot 的自动配置机制；</li><li>@EnableAutoConfiguration 是一个简单地注解，自动装配核心功能的实现是通过 AutoConfigurationImportSelector 类；</li><li>AutoConfigurationImportSelector 实现 ImportSelector 接口中的 selectImports 方法，主要用于获取所有符合条件的类的全限定类名，加载到 IoC 容器中</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">String</span><span style="color:#ADBAC7;">[] </span><span style="color:#DCBDFB;">selectImports</span><span style="color:#ADBAC7;">(AnnotationMetadata annotationMetadata) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 判断自动装配开关是否打开。默认spring.boot.enableautoconfiguration=true；</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 可在 application.properties 或 application.yml 中设置</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">isEnabled</span><span style="color:#ADBAC7;">(annotationMetadata)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> NO_IMPORTS;</span></span>
<span class="line"><span style="color:#ADBAC7;">    } </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 获取所有需要装配的bean</span></span>
<span class="line"><span style="color:#ADBAC7;">        AutoConfigurationMetadata</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">autoConfigurationMetadata</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span></span>
<span class="line"><span style="color:#ADBAC7;">                                            AutoConfigurationMetadataLoader.</span><span style="color:#DCBDFB;">loadMetadata</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.beanClassLoader);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 用于获取EnableAutoConfiguration注解中的 exclude 和 excludeName。</span></span>
<span class="line"><span style="color:#ADBAC7;">        AnnotationAttributes</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">attributes</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">getAttributes</span><span style="color:#ADBAC7;">(annotationMetadata);</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 获取需要自动装配的所有配置类，读取META-INF/spring.factories</span></span>
<span class="line"><span style="color:#ADBAC7;">       List</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">String</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">configurations</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">getCandidateConfigurations</span><span style="color:#ADBAC7;">(annotationMetadata, attributes);</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 去除重复配置类</span></span>
<span class="line"><span style="color:#ADBAC7;">       configurations </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">removeDuplicates</span><span style="color:#ADBAC7;">(configurations);</span></span>
<span class="line"><span style="color:#ADBAC7;">       Set</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">String</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">exclusions</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">getExclusions</span><span style="color:#ADBAC7;">(annotationMetadata, attributes);</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">checkExcludedClasses</span><span style="color:#ADBAC7;">(configurations, exclusions);</span></span>
<span class="line"><span style="color:#ADBAC7;">       configurations.</span><span style="color:#DCBDFB;">removeAll</span><span style="color:#ADBAC7;">(exclusions);</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 筛选，@ConditionalOnXXX 中的所有条件都满足，该类才会生效；</span></span>
<span class="line"><span style="color:#ADBAC7;">       configurations </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">filter</span><span style="color:#ADBAC7;">(configurations, autoConfigurationMetadata);</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">fireAutoConfigurationImportEvents</span><span style="color:#ADBAC7;">(configurations, exclusions);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> StringUtils.</span><span style="color:#DCBDFB;">toStringArray</span><span style="color:#ADBAC7;">(configurations);</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">selectImports</span><span style="color:#24292E;">(AnnotationMetadata annotationMetadata) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断自动装配开关是否打开。默认spring.boot.enableautoconfiguration=true；</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 可在 application.properties 或 application.yml 中设置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">isEnabled</span><span style="color:#24292E;">(annotationMetadata)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> NO_IMPORTS;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取所有需要装配的bean</span></span>
<span class="line"><span style="color:#24292E;">        AutoConfigurationMetadata autoConfigurationMetadata </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                                            AutoConfigurationMetadataLoader.</span><span style="color:#6F42C1;">loadMetadata</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.beanClassLoader);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 用于获取EnableAutoConfiguration注解中的 exclude 和 excludeName。</span></span>
<span class="line"><span style="color:#24292E;">        AnnotationAttributes attributes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getAttributes</span><span style="color:#24292E;">(annotationMetadata);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 获取需要自动装配的所有配置类，读取META-INF/spring.factories</span></span>
<span class="line"><span style="color:#24292E;">       List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; configurations </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getCandidateConfigurations</span><span style="color:#24292E;">(annotationMetadata, attributes);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 去除重复配置类</span></span>
<span class="line"><span style="color:#24292E;">       configurations </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">removeDuplicates</span><span style="color:#24292E;">(configurations);</span></span>
<span class="line"><span style="color:#24292E;">       Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; exclusions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getExclusions</span><span style="color:#24292E;">(annotationMetadata, attributes);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">checkExcludedClasses</span><span style="color:#24292E;">(configurations, exclusions);</span></span>
<span class="line"><span style="color:#24292E;">       configurations.</span><span style="color:#6F42C1;">removeAll</span><span style="color:#24292E;">(exclusions);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 筛选，@ConditionalOnXXX 中的所有条件都满足，该类才会生效；</span></span>
<span class="line"><span style="color:#24292E;">       configurations </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(configurations, autoConfigurationMetadata);</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">fireAutoConfigurationImportEvents</span><span style="color:#24292E;">(configurations, exclusions);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> StringUtils.</span><span style="color:#6F42C1;">toStringArray</span><span style="color:#24292E;">(configurations);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>  Spring Boot 通过@EnableAutoConfiguration 开启自动装配，通过 SpringFactoriesLoader 最终加载 META-INF/spring.factories 中的自动配置类实现自动装配，自动配置类其实就是通过@Conditional 按需加载的配置类，想要其生效必须引入 spring-boot-starter-xxx 包实现起步依赖。</p><p><img src="`+d+`" alt="Conditional"></p><h2 id="springboot-注解" tabindex="-1">Springboot 注解 <a class="header-anchor" href="#springboot-注解" aria-label="Permalink to &quot;Springboot 注解&quot;">​</a></h2><h3 id="_1、-springbootapplication" tabindex="-1">1、@SpringBootApplication <a class="header-anchor" href="#_1、-springbootapplication" aria-label="Permalink to &quot;1、@SpringBootApplication&quot;">​</a></h3><p>  申明让 spring boot 自动给程序进行必要的配置，这个配置等同于：@Configuration ，@EnableAutoConfiguration 和 @ComponentScan 三个配置。</p><h3 id="_2、-responsebody" tabindex="-1">2、@ResponseBody <a class="header-anchor" href="#_2、-responsebody" aria-label="Permalink to &quot;2、@ResponseBody&quot;">​</a></h3><p>  表示该方法的返回结果直接写入 HTTP response body 中，一般在异步获取数据时使用，用于构建 RESTful 的 api。 加上@Responsebody 后，会直接返回 json 数据。该注解一般会配合@RequestMapping 一起使用。</p><h3 id="_3、-controller" tabindex="-1">3、@Controller <a class="header-anchor" href="#_3、-controller" aria-label="Permalink to &quot;3、@Controller&quot;">​</a></h3><p>  用于定义控制器类，在 spring 项目中由控制器负责将用户发来的 URL 请求转发到对应的服务接口（service 层），一般这个注解在类中，通常方法需要配合注解@RequestMapping。在对应的方法上，视图解析器可以解析 return 的 jsp,html 页面，并且跳转到相应页面；若返回 json 等内容到页面，则需要加@ResponseBody 注解；</p><h3 id="_4、-restcontroller" tabindex="-1">4、@RestController <a class="header-anchor" href="#_4、-restcontroller" aria-label="Permalink to &quot;4、@RestController&quot;">​</a></h3><p>  用于标注控制层组件(如 struts 中的 action)，@ResponseBody + @Controller</p><h3 id="_5、-requestmapping" tabindex="-1">5、@RequestMapping <a class="header-anchor" href="#_5、-requestmapping" aria-label="Permalink to &quot;5、@RequestMapping&quot;">​</a></h3><p>  提供路由信息，负责 URL 到 Controller 中的具体函数的映射。RequestMapping 是一个用来处理请求地址映射的注解，可用于类或方法上。</p><p>  用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。该注解有六个属性：</p><ul><li>params:指定 request 中必须包含某些参数值是，才让该方法处理。</li><li>headers:指定 request 中必须包含某些指定的 header 值，才能让该方法处理请求。</li><li>value:指定请求的实际地址，指定的地址可以是 URI Template 模式</li><li>method:指定请求的 method 类型， GET、POST、PUT、DELETE 等</li><li>consumes:指定处理请求的提交内容类型（Content-Type），如 application/json,text/html;</li><li>produces:指定返回的内容类型，仅当 request 请求头中的(Accept)类型中包含该指定类型才返回</li></ul><h3 id="_6、-enableautoconfiguration" tabindex="-1">6、@EnableAutoConfiguration <a class="header-anchor" href="#_6、-enableautoconfiguration" aria-label="Permalink to &quot;6、@EnableAutoConfiguration&quot;">​</a></h3><p>  SpringBoot 自动配置（auto-configuration）：尝试根据你添加的 jar 依赖自动配置你的 Spring 应用。例如，如果你的 classpath 下存在 HSQLDB，并且你没有手动配置任何数据库连接 beans，那么我们将自动配置一个内存型（in-memory）数据库”。你可以将@EnableAutoConfiguration 或者@SpringBootApplication 注解添加到一个@Configuration 类上来选择自动配置。如果发现应用了你不想要的特定自动配置类，你可以使用@EnableAutoConfiguration 注解的排除属性来禁用它们。</p><ul><li>借助@Import 的帮助，将所有符合自动配置条件的 bean 定义加载到 IoC 容器。最关键的要属@Import(EnableAutoConfigurationImportSelector.class)，借助 EnableAutoConfigurationImportSelector，可以帮助 SpringBoot 应用将所有符合条件的@Configuration 配置都加载到当前 SpringBoot 创建并使用的 IoC 容器</li><li>@EnableAutoConfiguration 会根据类路径中的 jar 依赖为项目进行自动配置，如：添加了 spring-boot-starter-web 依赖，会自动添加 Tomcat 和 Spring MVC 的依赖，Spring Boot 会对 Tomcat 和 Spring MVC 进行自动配置。</li></ul><h3 id="_7、-componentscan" tabindex="-1">7、@ComponentScan <a class="header-anchor" href="#_7、-componentscan" aria-label="Permalink to &quot;7、@ComponentScan&quot;">​</a></h3><p>  表示将该类自动发现扫描组件。如果扫描到有@Component、@Controller、@Service 等这些注解的类，并注册为 Bean，可以自动收集所有的 Spring 组件，包括@Configuration 类。我们经常使用@ComponentScan 注解搜索 beans，并结合@Autowired 注解导入。可以自动收集所有的 Spring 组件，包括@Configuration 类。我们经常使用@ComponentScan 注解搜索 beans，并结合@Autowired 注解导入。如果没有配置的话，Spring Boot 会扫描启动类所在包下以及子包下的使用了@Service,@Repository 等注解的类。</p><h3 id="_8、-configuration" tabindex="-1">8、@Configuration <a class="header-anchor" href="#_8、-configuration" aria-label="Permalink to &quot;8、@Configuration&quot;">​</a></h3><p>  相当于传统的 xml 配置文件，如果有些第三方库需要用到 xml 文件，建议仍然通过@Configuration 类作为项目的配置主类——可以使用@ImportResource 注解加载 xml 配置文件。</p><h3 id="_9、-import" tabindex="-1">9、@Import <a class="header-anchor" href="#_9、-import" aria-label="Permalink to &quot;9、@Import&quot;">​</a></h3><p>  用来导入其他配置类。</p><h3 id="_10、-importresource" tabindex="-1">10、@ImportResource <a class="header-anchor" href="#_10、-importresource" aria-label="Permalink to &quot;10、@ImportResource&quot;">​</a></h3><p>  用来加载 xml 配置文件。</p><h3 id="_11、-autowired" tabindex="-1">11、@Autowired <a class="header-anchor" href="#_11、-autowired" aria-label="Permalink to &quot;11、@Autowired&quot;">​</a></h3><p>  自动导入依赖的 bean。byType 方式。把配置好的 Bean 拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。当加上（required=false）时，就算找不到 bean 也不报错。 @Inject：等价于默认的@Autowired，只是没有 required 属性；</p><h3 id="_12、-qualifier" tabindex="-1">12、@Qualifier <a class="header-anchor" href="#_12、-qualifier" aria-label="Permalink to &quot;12、@Qualifier&quot;">​</a></h3><p>  当有多个同一类型的 Bean 时，可以用@Qualifier(“name”)来指定。与@Autowired 配合使用。@Qualifier 限定描述符除了能根据名字进行注入，但能进行更细粒度的控制如何选择候选者</p><h3 id="_13、-service" tabindex="-1">13、@Service <a class="header-anchor" href="#_13、-service" aria-label="Permalink to &quot;13、@Service&quot;">​</a></h3><p>  一般用于修饰 service 层的组件</p><h3 id="_14、-repository" tabindex="-1">14、@Repository <a class="header-anchor" href="#_14、-repository" aria-label="Permalink to &quot;14、@Repository&quot;">​</a></h3><p>  使用@Repository 注解可以确保 DAO 或者 repositories 提供异常转译，这个注解修饰的 DAO 或者 repositories 类会被 ComponetScan 发现并配置，同时也不需要为它们提供 XML 配置项。</p><h3 id="_15、-bean" tabindex="-1">15、@Bean <a class="header-anchor" href="#_15、-bean" aria-label="Permalink to &quot;15、@Bean&quot;">​</a></h3><p>  用@Bean 标注方法等价于 XML 中配置的 bean。意思是产生一个 bean,并交给 spring 管理。</p><h3 id="_16、-dependson" tabindex="-1">16、@DependsOn <a class="header-anchor" href="#_16、-dependson" aria-label="Permalink to &quot;16、@DependsOn&quot;">​</a></h3><p>  @DependsOn 注解可以配置 Spring IoC 容器在初始化一个 Bean 之前，先初始化其他的 Bean 对象。</p><h3 id="_17、-primary" tabindex="-1">17、@Primary <a class="header-anchor" href="#_17、-primary" aria-label="Permalink to &quot;17、@Primary&quot;">​</a></h3><p>  当系统中需要配置多个具有相同类型的 bean 时，@Primary 可以定义这些 Bean 的优先级。</p><h3 id="_18、-value" tabindex="-1">18、@Value <a class="header-anchor" href="#_18、-value" aria-label="Permalink to &quot;18、@Value&quot;">​</a></h3><p>  注入 Spring boot application.properties 配置的属性的值。</p><h3 id="_19、-component" tabindex="-1">19、@Component <a class="header-anchor" href="#_19、-component" aria-label="Permalink to &quot;19、@Component&quot;">​</a></h3><p>  泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p><h3 id="_20、-resource-name-name-type-type" tabindex="-1">20、@Resource(name=”name”,type=”type”) <a class="header-anchor" href="#_20、-resource-name-name-type-type" aria-label="Permalink to &quot;20、@Resource(name=”name”,type=”type”)&quot;">​</a></h3><p>  没有括号内内容的话，默认 byName。与@Autowired 干类似的事。</p><h3 id="_21、-controlleradvice" tabindex="-1">21、@ControllerAdvice <a class="header-anchor" href="#_21、-controlleradvice" aria-label="Permalink to &quot;21、@ControllerAdvice&quot;">​</a></h3><p>  是@Component 注解的一个延伸注解，Spring 会自动扫描并检测被@ControllerAdvice 所标注的类。@ControllerAdvice 需要和@ExceptionHandler、@InitBinder 以及@ModelAttribute 注解搭配使用，主要是用来处理控制器所抛出的异常信息。</p><h3 id="_22、-exceptionhandler-exception-class" tabindex="-1">22、@ExceptionHandler（Exception.class） <a class="header-anchor" href="#_22、-exceptionhandler-exception-class" aria-label="Permalink to &quot;22、@ExceptionHandler（Exception.class）&quot;">​</a></h3><p>  注解用于标注处理特定类型异常类所抛出异常的方法。当控制器中的方法抛出异常时，Spring 会自动捕获异常，并将捕获的异常信息传递给被@ExceptionHandler 标注的方法。</p><h2 id="springboot-读取配置文件的注解" tabindex="-1">springboot 读取配置文件的注解 <a class="header-anchor" href="#springboot-读取配置文件的注解" aria-label="Permalink to &quot;springboot 读取配置文件的注解&quot;">​</a></h2><h3 id="_1、-value" tabindex="-1">1、@Value <a class="header-anchor" href="#_1、-value" aria-label="Permalink to &quot;1、@Value&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#96D0FF;">application.properties：</span></span>
<span class="line"><span style="color:#96D0FF;">demo.name=Name</span></span>
<span class="line"><span style="color:#96D0FF;">demo.age=18</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">application.properties：</span></span>
<span class="line"><span style="color:#032F62;">demo.name=Name</span></span>
<span class="line"><span style="color:#032F62;">demo.age=18</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">java代码：</span></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">Value</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;\${demo.name}&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">name;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">java代码：</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${demo.name}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span></code></pre></div><h3 id="_2、-configurationproperties" tabindex="-1">2、@ConfigurationProperties <a class="header-anchor" href="#_2、-configurationproperties" aria-label="Permalink to &quot;2、@ConfigurationProperties&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#96D0FF;">application.properties：</span></span>
<span class="line"><span style="color:#96D0FF;">demo.phone=10086</span></span>
<span class="line"><span style="color:#96D0FF;">demo.wife=self</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">application.properties：</span></span>
<span class="line"><span style="color:#032F62;">demo.phone=10086</span></span>
<span class="line"><span style="color:#032F62;">demo.wife=self</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">Component</span></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">ConfigurationProperties</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">prefix</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;demo&quot;</span><span style="color:#ADBAC7;">)    </span><span style="color:#768390;">//用于绑定属性，其中prefix表示所绑定的属性的前缀</span></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">PropertySource</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">value</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;config.properties&quot;</span><span style="color:#ADBAC7;">) </span><span style="color:#768390;">// 表示配置文件路径</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ConfigBeanProp</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 属性名称和配置文件的name一致</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">phone;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">wife;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;demo&quot;</span><span style="color:#24292E;">)    </span><span style="color:#6A737D;">//用于绑定属性，其中prefix表示所绑定的属性的前缀</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PropertySource</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;config.properties&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 表示配置文件路径</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigBeanProp</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 属性名称和配置文件的name一致</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String phone;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String wife;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="springboot-中实现跨域的-5-种方式" tabindex="-1">SpringBoot 中实现跨域的 5 种方式: <a class="header-anchor" href="#springboot-中实现跨域的-5-种方式" aria-label="Permalink to &quot;SpringBoot 中实现跨域的 5 种方式:&quot;">​</a></h2><p>  域：协议 + 域名 + 端口；三者完全相同则为同域，反之有其一不同均为不同域。   跨域请求：当前【发起请求】的域和【请求指向】的域属于不同域时，该次请求称之为跨域请求。</p><ul><li>全局跨域 <ul><li>返回新的 CorsFilter ： 在任意配置类，返回一个新的 CorsFIlter 的 Bean ，并添加映射路径和具体的 CORS 配置路径</li><li>重写 WebMvcConfigurer 接口的 addCorsMappings 方法</li></ul></li><li>局部跨域 <ul><li>使用注解 @CrossOrigin：在类上上使用注解，表示该类的所有方法允许跨域；也可以在方法上使用注解。</li><li>手动设置响应头 (HttpServletResponse)：response.addHeader(&quot;Access-Allow-Control-Origin&quot;,&quot;*&quot;)</li></ul></li></ul><h2 id="springboot-项目配置文件加密" tabindex="-1">springboot 项目配置文件加密 <a class="header-anchor" href="#springboot-项目配置文件加密" aria-label="Permalink to &quot;springboot 项目配置文件加密&quot;">​</a></h2><p>  依赖</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">dependency</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">groupId</span><span style="color:#ADBAC7;">&gt;com.github.ulisesbocchio&lt;/</span><span style="color:#8DDB8C;">groupId</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">artifactId</span><span style="color:#ADBAC7;">&gt;jasypt-spring-boot-starter&lt;/</span><span style="color:#8DDB8C;">artifactId</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">version</span><span style="color:#ADBAC7;">&gt;2.1.1&lt;/</span><span style="color:#8DDB8C;">version</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">dependency</span><span style="color:#ADBAC7;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.github.ulisesbocchio&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;jasypt-spring-boot-starter&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;2.1.1&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#96D0FF;">application.yml</span></span>
<span class="line"><span style="color:#8DDB8C;">jasypt</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#8DDB8C;">encryptor</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">password</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">B6YD-ABFF-EXC6-T9YQ --加密密码，自定义</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">algorithm</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">PBEWithMD5AndDES --加密方式</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">application.yml</span></span>
<span class="line"><span style="color:#22863A;">jasypt</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">encryptor</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">password</span><span style="color:#24292E;">: </span><span style="color:#032F62;">B6YD-ABFF-EXC6-T9YQ --加密密码，自定义</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">algorithm</span><span style="color:#24292E;">: </span><span style="color:#032F62;">PBEWithMD5AndDES --加密方式</span></span></code></pre></div><p>  获取加密后的密码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">ContextConfiguration</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">locations</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { </span><span style="color:#96D0FF;">&quot;classpath:application-development.yml&quot;</span><span style="color:#ADBAC7;"> })</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">JasyptSamples</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">extends</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">AbstractJUnit4SpringContextTests</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">String</span><span style="color:#ADBAC7;">[] </span><span style="color:#F69D50;">args</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">throws</span><span style="color:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="color:#ADBAC7;">        StandardPBEStringEncryptor</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">encryptor</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">StandardPBEStringEncryptor</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 加密方式，和配置文件中的algorithm保持一致</span></span>
<span class="line"><span style="color:#ADBAC7;">        encryptor.</span><span style="color:#DCBDFB;">setAlgorithm</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;PBEWithMD5AndDES&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 加密密码，和配置文件中的password保持一致</span></span>
<span class="line"><span style="color:#ADBAC7;">        encryptor.</span><span style="color:#DCBDFB;">setPassword</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;B6YD-ABFF-EXC6-T9YQ&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 需要加密的原文</span></span>
<span class="line"><span style="color:#ADBAC7;">        String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">plainText</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;2020workfromhome!&quot;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 加密</span></span>
<span class="line"><span style="color:#ADBAC7;">        String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">encryptedText</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> encryptor.</span><span style="color:#DCBDFB;">encrypt</span><span style="color:#ADBAC7;">(plainText);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 解密</span></span>
<span class="line"><span style="color:#ADBAC7;">        String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">decryptedText</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> encryptor.</span><span style="color:#DCBDFB;">decrypt</span><span style="color:#ADBAC7;">(encryptedText);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;plainText: &quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> plainText </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot; ---&gt; encryptedText: &quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> encryptedText);</span></span>
<span class="line"><span style="color:#ADBAC7;">        System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;encryptedText: &quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> encryptedText </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot; ---&gt; decryptedText: &quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> decryptedText);</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ContextConfiguration</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">locations</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;classpath:application-development.yml&quot;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JasyptSamples</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractJUnit4SpringContextTests</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        StandardPBEStringEncryptor encryptor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StandardPBEStringEncryptor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 加密方式，和配置文件中的algorithm保持一致</span></span>
<span class="line"><span style="color:#24292E;">        encryptor.</span><span style="color:#6F42C1;">setAlgorithm</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;PBEWithMD5AndDES&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 加密密码，和配置文件中的password保持一致</span></span>
<span class="line"><span style="color:#24292E;">        encryptor.</span><span style="color:#6F42C1;">setPassword</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;B6YD-ABFF-EXC6-T9YQ&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需要加密的原文</span></span>
<span class="line"><span style="color:#24292E;">        String plainText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2020workfromhome!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 加密</span></span>
<span class="line"><span style="color:#24292E;">        String encryptedText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> encryptor.</span><span style="color:#6F42C1;">encrypt</span><span style="color:#24292E;">(plainText);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 解密</span></span>
<span class="line"><span style="color:#24292E;">        String decryptedText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> encryptor.</span><span style="color:#6F42C1;">decrypt</span><span style="color:#24292E;">(encryptedText);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;plainText: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> plainText </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; ---&gt; encryptedText: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> encryptedText);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;encryptedText: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> encryptedText </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; ---&gt; decryptedText: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> decryptedText);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>  配置文件中使用加密后的密码</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#96D0FF;">spring：</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#8DDB8C;">datasource</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">password</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">ENC(v7n0OYKp1bqYMLHFigGbMg==) -- v7n0OYKp1bqYMLHFigGbMg== 是加密后的密码</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">spring：</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">datasource</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">password</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ENC(v7n0OYKp1bqYMLHFigGbMg==) -- v7n0OYKp1bqYMLHFigGbMg== 是加密后的密码</span></span></code></pre></div><h2 id="springboot-项目使用-slf4j-logback" tabindex="-1">SpringBoot 项目使用 SLF4J+logback <a class="header-anchor" href="#springboot-项目使用-slf4j-logback" aria-label="Permalink to &quot;SpringBoot 项目使用 SLF4J+logback&quot;">​</a></h2><p>  在 resource 目录下创建一个文件，命名为 logback.xml</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">&lt;?</span><span style="color:#8DDB8C;">xml</span><span style="color:#6CB6FF;"> version</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&#39;1.0&#39;</span><span style="color:#6CB6FF;"> encoding</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&#39;UTF-8&#39;</span><span style="color:#ADBAC7;">?&gt;</span></span>
<span class="line"><span style="color:#768390;">&lt;!--日志配置--&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">configuration</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">&lt;!--直接定义属性--&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">property</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">value</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">&lt;!--通过配置文件定义属性--&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">springProperty</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">source</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">&lt;!--定义并描述一个日志的输出属性--&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">appender</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;/</span><span style="color:#8DDB8C;">appender</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">&lt;!--创建一个具体的日志输出--&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">logger</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">level</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">additivity</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">   	 &lt;</span><span style="color:#8DDB8C;">appender-ref</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">ref</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">/&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;/</span><span style="color:#8DDB8C;">logger</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">&lt;!--基础的日志输出--&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">root</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">level</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">   	 &lt;</span><span style="color:#8DDB8C;">appender-ref</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">ref</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">/&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;/</span><span style="color:#8DDB8C;">root</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">configuration</span><span style="color:#ADBAC7;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;?</span><span style="color:#22863A;">xml</span><span style="color:#6F42C1;"> version</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&#39;1.0&#39;</span><span style="color:#6F42C1;"> encoding</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&#39;UTF-8&#39;</span><span style="color:#24292E;">?&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!--日志配置--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--直接定义属性--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--通过配置文件定义属性--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">springProperty</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">source</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--定义并描述一个日志的输出属性--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">appender</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">appender</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--创建一个具体的日志输出--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">logger</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">level</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">additivity</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   	 &lt;</span><span style="color:#22863A;">appender-ref</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">logger</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--基础的日志输出--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">root</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">level</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   	 &lt;</span><span style="color:#22863A;">appender-ref</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">root</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="_1、configuration" tabindex="-1">1、configuration <a class="header-anchor" href="#_1、configuration" aria-label="Permalink to &quot;1、configuration&quot;">​</a></h3><p>&lt;configuration&gt;是 logback.xml 这个 xml 文件的根节点，它包含以下属性：</p><ul><li>scan：当此属性设置为 true 时，配置文件如果发生改变，将会被重新加载，默认值为 true。</li><li>scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当 scan 为 true 时，此属性生效。默认的时间间隔为 1 分钟。</li><li>debug：当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。默认值为 false。</li></ul><h3 id="_2、property" tabindex="-1">2、property <a class="header-anchor" href="#_2、property" aria-label="Permalink to &quot;2、property&quot;">​</a></h3><p>  property 可以直接设置，例如：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">property</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;logFile&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">value</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;logs/mutest&quot;</span><span style="color:#ADBAC7;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;logFile&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;logs/mutest&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p>  这样就设置了一个名为 logFile 的变量，后续通过\${logFile}的方式就引用到了其值 logs/mutest。</p><h3 id="_3、springproperty" tabindex="-1">3、springProperty <a class="header-anchor" href="#_3、springproperty" aria-label="Permalink to &quot;3、springProperty&quot;">​</a></h3><p>  springProperty 配合配置文件，例如：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">springProperty</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;logFile&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">source</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;log.file&quot;</span><span style="color:#ADBAC7;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">springProperty</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;logFile&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">source</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;log.file&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p>  也是设置了名为 logFile 的变量，但没有直接赋值，而是通过 source 指向了配置文件的路径，配置文件中是这样的：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#8DDB8C;">log</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#8DDB8C;">file</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">logs/mutest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">log</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">file</span><span style="color:#24292E;">: </span><span style="color:#032F62;">logs/mutest</span></span></code></pre></div><h3 id="_4、root" tabindex="-1">4、root <a class="header-anchor" href="#_4、root" aria-label="Permalink to &quot;4、root&quot;">​</a></h3><p>  root 节点，必选节点，用来指定最基础的日志输出级别并指定&lt;appender&gt;，可以理解为根 logger。</p><p>  一个典型的 root 节点如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">root</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">level</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;debug&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;"> &lt;</span><span style="color:#8DDB8C;">appender-ref</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">ref</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;console&quot;</span><span style="color:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;"> &lt;</span><span style="color:#8DDB8C;">appender-ref</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">ref</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;file&quot;</span><span style="color:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">root</span><span style="color:#ADBAC7;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">root</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">level</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;debug&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">appender-ref</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;console&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">appender-ref</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;file&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">root</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="_5、appender" tabindex="-1">5、appender <a class="header-anchor" href="#_5、appender" aria-label="Permalink to &quot;5、appender&quot;">​</a></h3><p>  appender 节点是非常关键的一个节点，负责格式化一个日志输出节点（也就是描述日志存储类型、位置、滚动规则等属性）。appender 作用类似于构造一个日志模板，而 logger 是真正的日志输出者，使用某个 appender 作为模板去写日志。</p><h4 id="_5-1、consoleappender" tabindex="-1">5.1、ConsoleAppender <a class="header-anchor" href="#_5-1、consoleappender" aria-label="Permalink to &quot;5.1、ConsoleAppender&quot;">​</a></h4><p>  ConsoleAppender 的作用是将日志输出到控制台，一般在本地调试时使用，它的配置非常简单，一个典型的 ConsoleAppender 如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">appender</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;STDOUT&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;"> &lt;</span><span style="color:#8DDB8C;">encoder</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        &lt;</span><span style="color:#8DDB8C;">pattern</span><span style="color:#ADBAC7;">&gt;%d [%thread] %-5level %logger{50} -[%file:%line]- %msg%n&lt;/</span><span style="color:#8DDB8C;">pattern</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        &lt;</span><span style="color:#8DDB8C;">charset</span><span style="color:#ADBAC7;">&gt;UTF-8&lt;/</span><span style="color:#8DDB8C;">charset</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;/</span><span style="color:#8DDB8C;">encoder</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">appender</span><span style="color:#ADBAC7;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">appender</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;STDOUT&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;%d [%thread] %-5level %logger{50} -[%file:%line]- %msg%n&lt;/</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">charset</span><span style="color:#24292E;">&gt;UTF-8&lt;/</span><span style="color:#22863A;">charset</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">appender</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>  appender 有 name 和 class 两个属性：</p><ul><li>name：appender 节点的名称，在后文中被 logger 节点引用。一个 logback 配置文件中不能有重复的 appender name。</li><li>class：使用何种日志输出策略，分别是 ConsoleAppender（控制台日志）、FileAppender（文件日志）、RollingFileAppender（滚动文件日志）。</li></ul><h4 id="_5-2、rollingfileappender" tabindex="-1">5.2、RollingFileAppender <a class="header-anchor" href="#_5-2、rollingfileappender" aria-label="Permalink to &quot;5.2、RollingFileAppender&quot;">​</a></h4><p>  RollingFileAppender 用于滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。一个典型的 RollingFileAppender 节点如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">configuration</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;"> </span><span style="color:#768390;">&lt;!--直接定义属性--&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">property</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;logFile&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">value</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;logs/mutest&quot;</span><span style="color:#ADBAC7;">/&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">property</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;maxFileSize&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">value</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;30MB&quot;</span><span style="color:#ADBAC7;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;"> &lt;</span><span style="color:#8DDB8C;">appender</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;fileLog&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#768390;">&lt;!--日志文件存储路径，来自property设置--&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        &lt;</span><span style="color:#8DDB8C;">file</span><span style="color:#ADBAC7;">&gt;\${logFile}.log&lt;/</span><span style="color:#8DDB8C;">file</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        &lt;</span><span style="color:#8DDB8C;">encoder</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">            &lt;</span><span style="color:#8DDB8C;">pattern</span><span style="color:#ADBAC7;">&gt;%d [%thread] %-5level -[%file:%line]- %msg%n&lt;/</span><span style="color:#8DDB8C;">pattern</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">            &lt;</span><span style="color:#8DDB8C;">charset</span><span style="color:#ADBAC7;">&gt;UTF-8&lt;/</span><span style="color:#8DDB8C;">charset</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        &lt;/</span><span style="color:#8DDB8C;">encoder</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        &lt;</span><span style="color:#8DDB8C;">rollingPolicy</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">         </span><span style="color:#768390;">&lt;!--每天生成一个新的活动日志文件，旧的日志归档，后缀名为2019.08.12这种格式--&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">            &lt;</span><span style="color:#8DDB8C;">fileNamePattern</span><span style="color:#ADBAC7;">&gt;\${logFile}.%d{yyyy-MM-dd}.%i.log&lt;/</span><span style="color:#8DDB8C;">fileNamePattern</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">&lt;!--活动日志文件最大值，超过这个值将产生新日志文件--&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">            &lt;</span><span style="color:#8DDB8C;">maxFileSize</span><span style="color:#ADBAC7;">&gt;\${maxFileSize}&lt;/</span><span style="color:#8DDB8C;">maxFileSize</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">&lt;!--只保留最近30天的日志--&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">         &lt;</span><span style="color:#8DDB8C;">maxHistory</span><span style="color:#ADBAC7;">&gt;30&lt;/</span><span style="color:#8DDB8C;">maxHistory</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">         </span><span style="color:#768390;">&lt;!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志--&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">         &lt;</span><span style="color:#8DDB8C;">totalSizeCap</span><span style="color:#ADBAC7;">&gt;1GB&lt;/</span><span style="color:#8DDB8C;">totalSizeCap</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        &lt;/</span><span style="color:#8DDB8C;">rollingPolicy</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">&lt;!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志--&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        &lt;</span><span style="color:#8DDB8C;">filter</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">            &lt;</span><span style="color:#8DDB8C;">level</span><span style="color:#ADBAC7;">&gt;error&lt;/</span><span style="color:#8DDB8C;">level</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">            &lt;</span><span style="color:#8DDB8C;">onMatch</span><span style="color:#ADBAC7;">&gt;ACCEPT&lt;/</span><span style="color:#8DDB8C;">onMatch</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">            &lt;</span><span style="color:#8DDB8C;">onMismatch</span><span style="color:#ADBAC7;">&gt;DENY&lt;/</span><span style="color:#8DDB8C;">onMismatch</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        &lt;/</span><span style="color:#8DDB8C;">filter</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;/</span><span style="color:#8DDB8C;">appender</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">configuration</span><span style="color:#ADBAC7;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">&lt;!--直接定义属性--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;logFile&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;logs/mutest&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;maxFileSize&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;30MB&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">appender</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;fileLog&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">&lt;!--日志文件存储路径，来自property设置--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">file</span><span style="color:#24292E;">&gt;\${logFile}.log&lt;/</span><span style="color:#22863A;">file</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;%d [%thread] %-5level -[%file:%line]- %msg%n&lt;/</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">charset</span><span style="color:#24292E;">&gt;UTF-8&lt;/</span><span style="color:#22863A;">charset</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">rollingPolicy</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">&lt;!--每天生成一个新的活动日志文件，旧的日志归档，后缀名为2019.08.12这种格式--&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">fileNamePattern</span><span style="color:#24292E;">&gt;\${logFile}.%d{yyyy-MM-dd}.%i.log&lt;/</span><span style="color:#22863A;">fileNamePattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">&lt;!--活动日志文件最大值，超过这个值将产生新日志文件--&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">maxFileSize</span><span style="color:#24292E;">&gt;\${maxFileSize}&lt;/</span><span style="color:#22863A;">maxFileSize</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">&lt;!--只保留最近30天的日志--&gt;</span></span>
<span class="line"><span style="color:#24292E;">         &lt;</span><span style="color:#22863A;">maxHistory</span><span style="color:#24292E;">&gt;30&lt;/</span><span style="color:#22863A;">maxHistory</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">&lt;!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志--&gt;</span></span>
<span class="line"><span style="color:#24292E;">         &lt;</span><span style="color:#22863A;">totalSizeCap</span><span style="color:#24292E;">&gt;1GB&lt;/</span><span style="color:#22863A;">totalSizeCap</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">rollingPolicy</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">filter</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">level</span><span style="color:#24292E;">&gt;error&lt;/</span><span style="color:#22863A;">level</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">onMatch</span><span style="color:#24292E;">&gt;ACCEPT&lt;/</span><span style="color:#22863A;">onMatch</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">onMismatch</span><span style="color:#24292E;">&gt;DENY&lt;/</span><span style="color:#22863A;">onMismatch</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">filter</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">appender</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>  另外，RollingFileAppender 节点下有一些常用的子节点：</p><ul><li>&lt;filter&gt;：日志输出拦截器，可以自定义拦截器也可以用系统一些定义好的拦截器。</li><li>&lt;rollingPolicy&gt;：当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。属性 class 定义具体的滚动策略类。 <ul><li>SizeAndTimeBasedRollingPolicy：根据日志文件大小和时间周期作为切分条件，满足其中任意一个就要做切分。maxFileSize 的值决定了当天的日志文件大小上限，超过这个上限，同一天将会有多个日志文件，因此&lt;fileNamePattern&gt;\${logFile}.%d{yyyy-MM-dd}.%i&lt;/fileNamePattern&gt;中有一个%i，就是为应对同一天生成多个日志文件而写，在日志量很大的情况下，会出现 mutest.log.2020-07-28.0.log、mutest.2020-07-28.1.log 这种情况。</li><li>TimeBasedRollingPolicy：只以时间周期为切分条件，在这种策略下，存档日志名称格式设置为&lt;fileNamePattern&gt;\${logFile}.%d{yyyy-MM-dd}.log&lt;/fileNamePattern&gt;即可。</li><li>SizeBasedTriggeringPolicy：只以文件大小为切分条件，在这种策略下，&lt;maxFileSize&gt;日志滚动的唯一触发条件。</li></ul></li><li>&lt;fileNamePattern&gt;：必要节点。以\${logFile}.%d{yyyy-MM-dd}.%i.log 为例（mutest.2019-07-28.0.log），有这么几个部分： <ul><li>\${logFile}：固定文件名称前缀，这里是引用了&lt;property&gt;中设置的变量。</li><li>%d{yyyy-MM}：指定日志名称中间日期的格式，如果只有%d，将默认使用 yyyy-MM-dd 格式。</li><li>%i：当日志量过大，导致同一天生成两个及以上日志文件时，这个属性将为日志名称加一个索引作为后缀，以加以区分。</li><li>.log.zip：指定存档日志文件的压缩格式。</li></ul></li></ul><p>  还有几个属性，要根据滚动策略去添加：</p><ul><li>&lt;maxFileSize&gt;：这是活动文件的大小，SizeAndTimeBasedRollingPolicy 策略和 SizeBasedTriggeringPolicy 策略下必须有。默认值是 10MB。超过这个大小，就要生成新的活动文件了。</li><li>&lt;maxHistory&gt;：可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且&lt;maxHistory&gt;是 6，则只保存最近 6 个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删。</li><li>&lt;totalSizeCap&gt;：可选节点，表示日志文件总大小超过 1GB 将删除存档日志文件。</li></ul><h3 id="_6、logger" tabindex="-1">6、logger <a class="header-anchor" href="#_6、logger" aria-label="Permalink to &quot;6、logger&quot;">​</a></h3><p>  logger 节点，可选节点，作用是指明具体的包或类的日志输出级别，以及要使用的&lt;appender&gt;</p><p>  一个典型的 logger 节点如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">&lt;!-- name 属性表示匹配的logger类型前缀 --&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">logger</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;com.mutest.demo&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">level</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">value</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;INFO&quot;</span><span style="color:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">&lt;!-- 引用的appender，类似于spring的ref --&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">appender-ref</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">ref</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;fileLog&quot;</span><span style="color:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">appender-ref</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">ref</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;STDOUT&quot;</span><span style="color:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">logger</span><span style="color:#ADBAC7;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- name 属性表示匹配的logger类型前缀 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">logger</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.mutest.demo&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">level</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;INFO&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 引用的appender，类似于spring的ref --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">appender-ref</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;fileLog&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">appender-ref</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;STDOUT&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">logger</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>name：必写属性，指定具体包或类，被指定的包或类中的日志输出将遵从该 logger 规定配置。</li><li>level：非必写属性，指定日志输出级别，该级别将覆盖 root 配置的输出级别。</li><li>addtivity：非必写属性，是否向上级 loger 传递打印信息。默认是 true。</li><li>appender-ref：引用的 appender，引用后将实现 appender 中定义的行为，例如上面示例中引用了 fileLog 这个 appender，那么 com.mutest.demo 中打印的日志将按 fileLog 的配置进行记录。一个 logger 可以有多个引用，互不影响。</li></ul><h3 id="_7、日志滚动" tabindex="-1">7、日志滚动 <a class="header-anchor" href="#_7、日志滚动" aria-label="Permalink to &quot;7、日志滚动&quot;">​</a></h3><p>  如果不设置日志滚动策略，那么会一直向一个文件中追加日志，日志文件会越来越大，想要查找有用信息会很慢，而且有占满磁盘的风险。所以，我们要设置滚动策略，即满足一定条件，生成一个新文件，而旧日志文件进行归档。</p><h4 id="_7-1、-时间策略" tabindex="-1">7.1、 时间策略 <a class="header-anchor" href="#_7-1、-时间策略" aria-label="Permalink to &quot;7.1、 时间策略&quot;">​</a></h4><p>  以时间周期为切分条件，&lt;rollingPolicy&gt;的 class 要设置为 ch.qos.logback.core.rolling.TimeBasedRollingPolicy，一个典型示例（每天生成一个日志文件，保存 30 天的日志文件）如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">configuration</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#8DDB8C;">appender</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;FILE&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">rollingPolicy</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">      &lt;</span><span style="color:#8DDB8C;">fileNamePattern</span><span style="color:#ADBAC7;">&gt;logFile.%d{yyyy-MM-dd}.log&lt;/</span><span style="color:#8DDB8C;">fileNamePattern</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">      &lt;</span><span style="color:#8DDB8C;">maxHistory</span><span style="color:#ADBAC7;">&gt;30&lt;/</span><span style="color:#8DDB8C;">maxHistory</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;/</span><span style="color:#8DDB8C;">rollingPolicy</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">encoder</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">      &lt;</span><span style="color:#8DDB8C;">pattern</span><span style="color:#ADBAC7;">&gt;%-4relative [%thread] %-5level %logger{35} - %msg%n&lt;/</span><span style="color:#8DDB8C;">pattern</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;/</span><span style="color:#8DDB8C;">encoder</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;/</span><span style="color:#8DDB8C;">appender</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#8DDB8C;">root</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">level</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;DEBUG&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">appender-ref</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">ref</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;FILE&quot;</span><span style="color:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;/</span><span style="color:#8DDB8C;">root</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">configuration</span><span style="color:#ADBAC7;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">appender</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;FILE&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">rollingPolicy</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">fileNamePattern</span><span style="color:#24292E;">&gt;logFile.%d{yyyy-MM-dd}.log&lt;/</span><span style="color:#22863A;">fileNamePattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">maxHistory</span><span style="color:#24292E;">&gt;30&lt;/</span><span style="color:#22863A;">maxHistory</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">rollingPolicy</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;%-4relative [%thread] %-5level %logger{35} - %msg%n&lt;/</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">appender</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">root</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">level</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;DEBUG&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">appender-ref</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;FILE&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">root</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h4 id="_7-2、-文件大小策略" tabindex="-1">7.2、 文件大小策略 <a class="header-anchor" href="#_7-2、-文件大小策略" aria-label="Permalink to &quot;7.2、 文件大小策略&quot;">​</a></h4><p>  以文件大小为切分条件，&lt;rollingPolicy&gt;的 class 要设置为 ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy，一个典型示例（活动日志文件大小超过 30M 则生成新的活动日志文件）如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">configuration</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#8DDB8C;">appender</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;FILE&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">rollingPolicy</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">      &lt;</span><span style="color:#8DDB8C;">fileNamePattern</span><span style="color:#ADBAC7;">&gt;logFile.%d{yyyy-MM-dd}.%i.log&lt;/</span><span style="color:#8DDB8C;">fileNamePattern</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">      &lt;</span><span style="color:#8DDB8C;">maxFileSize</span><span style="color:#ADBAC7;">&gt;30MB&lt;/</span><span style="color:#8DDB8C;">maxFileSize</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;/</span><span style="color:#8DDB8C;">rollingPolicy</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">encoder</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">      &lt;</span><span style="color:#8DDB8C;">pattern</span><span style="color:#ADBAC7;">&gt;%-4relative [%thread] %-5level %logger{35} - %msg%n&lt;/</span><span style="color:#8DDB8C;">pattern</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;/</span><span style="color:#8DDB8C;">encoder</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;/</span><span style="color:#8DDB8C;">appender</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#8DDB8C;">root</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">level</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;DEBUG&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">appender-ref</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">ref</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;FILE&quot;</span><span style="color:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;/</span><span style="color:#8DDB8C;">root</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">configuration</span><span style="color:#ADBAC7;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">appender</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;FILE&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">rollingPolicy</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">fileNamePattern</span><span style="color:#24292E;">&gt;logFile.%d{yyyy-MM-dd}.%i.log&lt;/</span><span style="color:#22863A;">fileNamePattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">maxFileSize</span><span style="color:#24292E;">&gt;30MB&lt;/</span><span style="color:#22863A;">maxFileSize</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">rollingPolicy</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;%-4relative [%thread] %-5level %logger{35} - %msg%n&lt;/</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">appender</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">root</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">level</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;DEBUG&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">appender-ref</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;FILE&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">root</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>  要注意的是，&lt;fileNamePattern&gt;中，%i 必须要有，如果同一天产生多个归档日志文件，%i 会产生一个后缀加以区分。例如 mutest.2019-07-28.0.log 和 mutest.2019-07-28.1.log。</p><h4 id="_7-3、时间与文件大小策略" tabindex="-1">7.3、时间与文件大小策略 <a class="header-anchor" href="#_7-3、时间与文件大小策略" aria-label="Permalink to &quot;7.3、时间与文件大小策略&quot;">​</a></h4><p>  根据日志文件大小和时间周期作为切分条件，满足其中任意一个就要做切分。&lt;rollingPolicy&gt;的 class 要设置为 ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy，一个典型示例如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">configuration</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#8DDB8C;">appender</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;fileLog&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        &lt;</span><span style="color:#8DDB8C;">file</span><span style="color:#ADBAC7;">&gt;mutest.log&lt;/</span><span style="color:#8DDB8C;">file</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        &lt;</span><span style="color:#8DDB8C;">encoder</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">            &lt;</span><span style="color:#8DDB8C;">pattern</span><span style="color:#ADBAC7;">&gt;%d [%thread] %-5level -[%file:%line]- %msg%n&lt;/</span><span style="color:#8DDB8C;">pattern</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">            &lt;</span><span style="color:#8DDB8C;">charset</span><span style="color:#ADBAC7;">&gt;UTF-8&lt;/</span><span style="color:#8DDB8C;">charset</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        &lt;/</span><span style="color:#8DDB8C;">encoder</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        &lt;</span><span style="color:#8DDB8C;">rollingPolicy</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">            &lt;</span><span style="color:#8DDB8C;">fileNamePattern</span><span style="color:#ADBAC7;">&gt;\${logFile}.%d{yyyy-MM-dd}.%i.log&lt;/</span><span style="color:#8DDB8C;">fileNamePattern</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">            &lt;</span><span style="color:#8DDB8C;">maxFileSize</span><span style="color:#ADBAC7;">&gt;\${maxFileSize}&lt;/</span><span style="color:#8DDB8C;">maxFileSize</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        &lt;/</span><span style="color:#8DDB8C;">rollingPolicy</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;/</span><span style="color:#8DDB8C;">appender</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#8DDB8C;">root</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">level</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;DEBUG&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">appender-ref</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">ref</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;FILE&quot;</span><span style="color:#ADBAC7;"> /&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;/</span><span style="color:#8DDB8C;">root</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">configuration</span><span style="color:#ADBAC7;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">appender</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;fileLog&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">file</span><span style="color:#24292E;">&gt;mutest.log&lt;/</span><span style="color:#22863A;">file</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;%d [%thread] %-5level -[%file:%line]- %msg%n&lt;/</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">charset</span><span style="color:#24292E;">&gt;UTF-8&lt;/</span><span style="color:#22863A;">charset</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">rollingPolicy</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">fileNamePattern</span><span style="color:#24292E;">&gt;\${logFile}.%d{yyyy-MM-dd}.%i.log&lt;/</span><span style="color:#22863A;">fileNamePattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">maxFileSize</span><span style="color:#24292E;">&gt;\${maxFileSize}&lt;/</span><span style="color:#22863A;">maxFileSize</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">rollingPolicy</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">appender</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">root</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">level</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;DEBUG&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">appender-ref</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;FILE&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">root</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>  同样&lt;fileNamePattern&gt;中必须有%i。</p><h2 id="spring-boot-获取-bean-的-3-种方式" tabindex="-1">Spring Boot 获取 Bean 的 3 种方式 <a class="header-anchor" href="#spring-boot-获取-bean-的-3-种方式" aria-label="Permalink to &quot;Spring Boot 获取 Bean 的 3 种方式&quot;">​</a></h2><h3 id="方式一、注解-postconstruct" tabindex="-1">方式一、注解@PostConstruct： <a class="header-anchor" href="#方式一、注解-postconstruct" aria-label="Permalink to &quot;方式一、注解@PostConstruct：&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> com.example.javautilsproject.service.AutoMethodDemoService;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.springframework.stereotype.Component;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> javax.annotation.PostConstruct;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;"> * springboot静态方法获取 bean 的三种方式(一)</span></span>
<span class="line"><span style="color:#768390;"> */</span></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">Component</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">StaticMethodGetBean_1</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">Autowired</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> AutoMethodDemoService</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">autoMethodDemoService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">Autowired</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> AutoMethodDemoService</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">staticAutoMethodDemoService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">PostConstruct</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">init</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">        staticAutoMethodDemoService </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> autoMethodDemoService;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> String </span><span style="color:#DCBDFB;">getAuthorizer</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> staticAutoMethodDemoService.</span><span style="color:#DCBDFB;">test</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.example.javautilsproject.service.AutoMethodDemoService;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.stereotype.Component;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.annotation.PostConstruct;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * springboot静态方法获取 bean 的三种方式(一)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StaticMethodGetBean_1</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AutoMethodDemoService autoMethodDemoService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> AutoMethodDemoService staticAutoMethodDemoService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PostConstruct</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        staticAutoMethodDemoService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> autoMethodDemoService;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getAuthorizer</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> staticAutoMethodDemoService.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>  PostConstruct 注释用于在依赖关系注入完成之后需要执行的方法上，以执行任何初始化。此方法必须在将类放入服务之前调用。</p><p>  应用 PostConstruct 注释的方法必须遵守以下所有标准：</p><ul><li>该方法不得有任何参数，除非是在 EJB 拦截器 (interceptor) 的情况下，根据 EJB 规范的定义，在这种情况下它将带有一个 InvocationContext 对象</li><li>该方法的返回类型必须为 void；</li><li>该方法不得抛出已检查异常；</li><li>应用 PostConstruct 的方法可以是 public、protected、package private 或 private；</li><li>除了应用程序客户端之外，该方法不能是 static；</li><li>该方法可以是 final；</li><li>如果该方法抛出未检查异常，那么不得将类放入服务中，除非是能够处理异常并可从中恢复的 EJB。</li></ul><h3 id="方式二-启动类-applicationcontext" tabindex="-1">方式二：启动类 ApplicationContext <a class="header-anchor" href="#方式二-启动类-applicationcontext" aria-label="Permalink to &quot;方式二：启动类 ApplicationContext&quot;">​</a></h3><p>  实现方式：在 springboot 的启动类中，定义 static 变量 ApplicationContext，利用容器的 getBean 方法获得依赖对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.springframework.boot.SpringApplication;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.springframework.boot.autoconfigure.SpringBootApplication;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.springframework.context.ConfigurableApplicationContext;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">SpringBootApplication</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Application</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> ConfigurableApplicationContext</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">ac;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">String</span><span style="color:#ADBAC7;">[] </span><span style="color:#F69D50;">args</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">       ac </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SpringApplication.</span><span style="color:#DCBDFB;">run</span><span style="color:#ADBAC7;">(Application.class, args);</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 调用方式</span></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">RestController</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">TestController</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">GetMapping</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;test2&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">method_2</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">        AutoMethodDemoService</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">methodDemoService</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Application.ac.</span><span style="color:#DCBDFB;">getBean</span><span style="color:#ADBAC7;">(AutoMethodDemoService.class);</span></span>
<span class="line"><span style="color:#ADBAC7;">        String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">test2</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> methodDemoService.</span><span style="color:#DCBDFB;">test2</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">        System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(test2);</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.boot.SpringApplication;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.boot.autoconfigure.SpringBootApplication;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.context.ConfigurableApplicationContext;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootApplication</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Application</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ConfigurableApplicationContext ac;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">       ac </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(Application.class, args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 调用方式</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestController</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test2&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method_2</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        AutoMethodDemoService methodDemoService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Application.ac.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(AutoMethodDemoService.class);</span></span>
<span class="line"><span style="color:#24292E;">        String test2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> methodDemoService.</span><span style="color:#6F42C1;">test2</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(test2);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="方式三-手动注入-applicationcontext" tabindex="-1">方式三：手动注入 ApplicationContext <a class="header-anchor" href="#方式三-手动注入-applicationcontext" aria-label="Permalink to &quot;方式三：手动注入 ApplicationContext&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.springframework.beans.BeansException;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.springframework.context.ApplicationContext;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.springframework.context.ApplicationContextAware;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.springframework.stereotype.Component;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;"> * springboot静态方法获取 bean 的三种方式(三)</span></span>
<span class="line"><span style="color:#768390;"> */</span></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">Component</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">StaticMethodGetBean_3</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F47067;">implements</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">ApplicationContextAware</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> ApplicationContext</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">applicationContext;</span></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">Override</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">setApplicationContext</span><span style="color:#ADBAC7;">(ApplicationContext </span><span style="color:#F69D50;">applicationContext</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">throws</span><span style="color:#ADBAC7;"> BeansException {</span></span>
<span class="line"><span style="color:#ADBAC7;">        StaticMethodGetBean_3.applicationContext </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> applicationContext;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F47067;">T</span><span style="color:#ADBAC7;">&gt; T  </span><span style="color:#DCBDFB;">getBean</span><span style="color:#ADBAC7;">(Class&lt;</span><span style="color:#F47067;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">clazz</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> applicationContext </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;">applicationContext.</span><span style="color:#DCBDFB;">getBean</span><span style="color:#ADBAC7;">(clazz)</span><span style="color:#F47067;">:</span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 调用方式</span></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">Test</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">method_3</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">    AutoMethodDemoService</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">autoMethodDemoService</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> StaticMethodGetBean_3.</span><span style="color:#DCBDFB;">getBean</span><span style="color:#ADBAC7;">(AutoMethodDemoService.class);</span></span>
<span class="line"><span style="color:#ADBAC7;">    String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">test3</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> autoMethodDemoService.</span><span style="color:#DCBDFB;">test3</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(test3);</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.beans.BeansException;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.context.ApplicationContext;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.context.ApplicationContextAware;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.stereotype.Component;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * springboot静态方法获取 bean 的三种方式(三)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StaticMethodGetBean_3</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApplicationContextAware</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ApplicationContext applicationContext;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setApplicationContext</span><span style="color:#24292E;">(ApplicationContext </span><span style="color:#E36209;">applicationContext</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> BeansException {</span></span>
<span class="line"><span style="color:#24292E;">        StaticMethodGetBean_3.applicationContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> applicationContext;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; T  </span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">clazz</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> applicationContext </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">applicationContext.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(clazz)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 调用方式</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method_3</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    AutoMethodDemoService autoMethodDemoService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StaticMethodGetBean_3.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(AutoMethodDemoService.class);</span></span>
<span class="line"><span style="color:#24292E;">    String test3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> autoMethodDemoService.</span><span style="color:#6F42C1;">test3</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(test3);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,137);function h(s,m,b,q,f,v){const o=t,e=c("ClientOnly");return l(),y("div",null,[F,i(e,null,{default:A(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),g(o,{key:0,article:s.$frontmatter},null,8,["article"])):B("",!0)]}),_:1}),E])}const P=r(u,[["render",h]]);export{k as __pageData,P as default};
