import{_ as t}from"./chunks/ArticleMetadata.8b6b367a.js";import{_ as r,H as c,o as l,c as y,J as i,E as A,C as p,a as D,V as C,D as u,G as B}from"./chunks/framework.981adca9.js";const _=JSON.parse('{"title":"Mybatis","description":"","frontmatter":{"title":"Mybatis","author":"Charles Chu","date":"2021/09/14","isOriginal":true},"headers":[],"relativePath":"md/java/mybatis/Mybatis.md","filePath":"md/java/mybatis/Mybatis.md","lastUpdated":1691826114000}'),d={name:"md/java/mybatis/Mybatis.md"},F=p("h1",{id:"mybatis",tabindex:"-1"},[D("Mybatis "),p("a",{class:"header-anchor",href:"#mybatis","aria-label":'Permalink to "Mybatis"'},"​")],-1),m=C(`<h2 id="mybatis缓存" tabindex="-1">Mybatis缓存 <a class="header-anchor" href="#mybatis缓存" aria-label="Permalink to &quot;Mybatis缓存&quot;">​</a></h2><h3 id="一级缓存" tabindex="-1">一级缓存 <a class="header-anchor" href="#一级缓存" aria-label="Permalink to &quot;一级缓存&quot;">​</a></h3><ul><li>它指的是Mybatis中SqlSession对象的缓存。</li><li>当我们执行查询之后，查询的结果会同时存入到SqlSession为我们提供一块区域中。</li><li>该区域的结构是一个Map。当我们再次查询同样的数据，mybatis会先去sqlsession中</li><li>查询是否有，有的话直接拿出来用。</li><li>当SqlSession对象消失时，mybatis的一级缓存也就消失了。</li></ul><p>  一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有 flush 或 close，它就存在。</p><p>  一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等方法时，就会清空一级缓存。</p><h3 id="二级缓存" tabindex="-1">二级缓存 <a class="header-anchor" href="#二级缓存" aria-label="Permalink to &quot;二级缓存&quot;">​</a></h3><p>  它指的是Mybatis中SqlSessionFactory对象的缓存。由同一个SqlSessionFactory对象创建的SqlSession共享其缓存。</p><p> 二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的。</p><p>  当我们在使用二级缓存时，所缓存的类一定要实现 java.io.Serializable 接口，这种就可以使用序列化方式来保存对象。</p><h4 id="二级缓存的使用步骤" tabindex="-1">二级缓存的使用步骤 <a class="header-anchor" href="#二级缓存的使用步骤" aria-label="Permalink to &quot;二级缓存的使用步骤&quot;">​</a></h4><ul><li>第一步：让Mybatis框架支持二级缓存（在SqlMapConfig.xml中配置）</li><li>第二步：让当前的映射文件支持二级缓存（在IUserDao.xml中配置）</li><li>第三步：让当前的操作支持二级缓存（在select标签中配置）</li></ul><h2 id="和-的区别" tabindex="-1">#{}和\${}的区别 <a class="header-anchor" href="#和-的区别" aria-label="Permalink to &quot;#{}和\${}的区别&quot;">​</a></h2><p>Mybatis的Mapper.xml语句中parameterType向SQL语句传参有两种方式：#{}和\${}</p><p>我们经常使用的是#{},一般解说是因为这种方式可以防止SQL注入，简单的说#{}这种方式SQL语句是经过预编译的，它是把#{}中间的参数转义成字符串，举个例子：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">-- 预编译后,会动态解析成一个参数标记符?：</span></span>
<span class="line"><span style="color:#F47067;">select</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> student </span><span style="color:#F47067;">where</span><span style="color:#ADBAC7;"> student_name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> #{</span><span style="color:#F47067;">name</span><span style="color:#ADBAC7;">} </span></span>
<span class="line"><span style="color:#F47067;">select</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> student </span><span style="color:#F47067;">where</span><span style="color:#ADBAC7;"> student_name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ?</span></span>
<span class="line"><span style="color:#ADBAC7;"> </span></span>
<span class="line"><span style="color:#768390;">-- 而使用\${}在动态解析时候，会传入参数字符串</span></span>
<span class="line"><span style="color:#F47067;">select</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> student </span><span style="color:#F47067;">where</span><span style="color:#ADBAC7;"> student_name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> \${</span><span style="color:#F47067;">name</span><span style="color:#ADBAC7;">} </span></span>
<span class="line"><span style="color:#F47067;">select</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> student </span><span style="color:#F47067;">where</span><span style="color:#ADBAC7;"> student_name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;lyrics&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- 预编译后,会动态解析成一个参数标记符?：</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> student </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> student_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> #{</span><span style="color:#D73A49;">name</span><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> student </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> student_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ?</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">-- 而使用\${}在动态解析时候，会传入参数字符串</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> student </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> student_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \${</span><span style="color:#D73A49;">name</span><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> student </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> student_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;lyrics&#39;</span></span></code></pre></div><ul><li>#{} 这种取值是编译好SQL语句再取值，\${} 这种是取值以后再去编译SQL语句</li><li>#{}方式能够很大程度防止sql注入。$方式无法防止Sql注入。</li><li>$方式一般用于传入数据库对象</li></ul><h2 id="mybatis中的mapper接口里的方法-是不能重载的" tabindex="-1">Mybatis中的Mapper接口里的方法，是不能重载的 <a class="header-anchor" href="#mybatis中的mapper接口里的方法-是不能重载的" aria-label="Permalink to &quot;Mybatis中的Mapper接口里的方法，是不能重载的&quot;">​</a></h2><p>  因为是使用 全限名+方法名 的保存和寻找策略。Mapper 接口的工作原理是 JDK 动态代理，Mybatis 运行时会使用 JDK动态代理为 Mapper 接口生成代理对象 proxy，代理对象会拦截接口方法，转而执行 MapperStatement 所代表的 sql，然后将 sql 执行结果返回。</p><h2 id="mybatis是如何将sql执行结果封装为目标对象并返回的-都有哪些映射形式" tabindex="-1">Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？ <a class="header-anchor" href="#mybatis是如何将sql执行结果封装为目标对象并返回的-都有哪些映射形式" aria-label="Permalink to &quot;Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？&quot;">​</a></h2><ul><li>第一种是使用标签，逐一定义数据库列名和对象属性名之间的映射关系。</li><li>第二种是使用 sql 列的别名功能，将列的别名书写为对象属性名。   有了列名与属性名的映射关系后，Mybatis 通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。</li></ul><h2 id="mybatis-动态-sql-有什么用-执行原理-有哪些动态-sql" tabindex="-1">Mybatis 动态 sql 有什么用？执行原理？有哪些动态 sql？ <a class="header-anchor" href="#mybatis-动态-sql-有什么用-执行原理-有哪些动态-sql" aria-label="Permalink to &quot;Mybatis 动态 sql 有什么用？执行原理？有哪些动态 sql？&quot;">​</a></h2><p>  Mybatis 动态 sql 可以在 Xml 映射文件内，以标签的形式编写动态 sql，执行原理 是根据表达式的值 完成逻辑判断并动态拼接 sql 的功能。Mybatis 提供了 9 种动态 sql 标签：trim | where | set | foreach | if | choose | when | otherwise | bind。</p><h2 id="mybatis连接多个数据源" tabindex="-1">Mybatis连接多个数据源 <a class="header-anchor" href="#mybatis连接多个数据源" aria-label="Permalink to &quot;Mybatis连接多个数据源&quot;">​</a></h2><h3 id="配置多个数据源" tabindex="-1">配置多个数据源 <a class="header-anchor" href="#配置多个数据源" aria-label="Permalink to &quot;配置多个数据源&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">Configuration</span></span>
<span class="line"><span style="color:#768390;">// 扫描对应库中的dao包所在位置,dao位置也要对应放在不同位置,利用不同的dao请求不同的数据源数据</span></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">MapperScan</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">basePackages</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span><span style="color:#96D0FF;">&quot;com.wdbyte.mapper.primary&quot;</span><span style="color:#ADBAC7;">}, </span><span style="color:#6CB6FF;">sqlSessionFactoryRef</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;sqlSessionFactory&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">PrimaryDataSourceConfig</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;"> </span></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">Bean</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;dataSource&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">ConfigurationProperties</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">prefix</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;spring.datasource.primary&quot;</span><span style="color:#ADBAC7;">) </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 读取yml配置文件的数据库连接配置（url,username,password,driverClassName）</span></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">Primary</span><span style="color:#ADBAC7;"> </span><span style="color:#768390;">// @Primary 表示默认的,必须且指定一个</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> DataSource </span><span style="color:#DCBDFB;">dataSource</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> DataSourceBuilder.</span><span style="color:#DCBDFB;">create</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">build</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;"> </span></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">Bean</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;sqlSessionFactory&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">Primary</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// @Qualifier(&quot;dataSource&quot;) 注入上面配置的数据源</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> SqlSessionFactory </span><span style="color:#DCBDFB;">sqlSessionFactory</span><span style="color:#ADBAC7;">(@</span><span style="color:#F47067;">Qualifier</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;dataSource&quot;</span><span style="color:#ADBAC7;">) DataSource </span><span style="color:#F69D50;">dataSource</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">throws</span><span style="color:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="color:#ADBAC7;">        SqlSessionFactoryBean</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">bean</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">SqlSessionFactoryBean</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">        bean.</span><span style="color:#DCBDFB;">setDataSource</span><span style="color:#ADBAC7;">(dataSource);</span></span>
<span class="line"><span style="color:#ADBAC7;">        bean.</span><span style="color:#DCBDFB;">setMapperLocations</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">PathMatchingResourcePatternResolver</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">getResources</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;classpath:mapper/*.xml&quot;</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> bean.</span><span style="color:#DCBDFB;">getObject</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;"> </span></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">Bean</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;sqlSessionTemplate&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">Primary</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> SqlSessionTemplate </span><span style="color:#DCBDFB;">sqlSessionTemplate</span><span style="color:#ADBAC7;">(@</span><span style="color:#F47067;">Qualifier</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;sqlSessionFactory&quot;</span><span style="color:#ADBAC7;">) SqlSessionFactory </span><span style="color:#F69D50;">sqlSessionFactory</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">SqlSessionTemplate</span><span style="color:#ADBAC7;">(sqlSessionFactory);</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#6A737D;">// 扫描对应库中的dao包所在位置,dao位置也要对应放在不同位置,利用不同的dao请求不同的数据源数据</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">MapperScan</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">basePackages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;com.wdbyte.mapper.primary&quot;</span><span style="color:#24292E;">}, </span><span style="color:#005CC5;">sqlSessionFactoryRef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;sqlSessionFactory&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PrimaryDataSourceConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;dataSource&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.datasource.primary&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取yml配置文件的数据库连接配置（url,username,password,driverClassName）</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Primary</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// @Primary 表示默认的,必须且指定一个</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DataSource </span><span style="color:#6F42C1;">dataSource</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DataSourceBuilder.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;sqlSessionFactory&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Primary</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// @Qualifier(&quot;dataSource&quot;) 注入上面配置的数据源</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SqlSessionFactory </span><span style="color:#6F42C1;">sqlSessionFactory</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;dataSource&quot;</span><span style="color:#24292E;">) DataSource </span><span style="color:#E36209;">dataSource</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        SqlSessionFactoryBean bean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSessionFactoryBean</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        bean.</span><span style="color:#6F42C1;">setDataSource</span><span style="color:#24292E;">(dataSource);</span></span>
<span class="line"><span style="color:#24292E;">        bean.</span><span style="color:#6F42C1;">setMapperLocations</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PathMatchingResourcePatternResolver</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getResources</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;classpath:mapper/*.xml&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bean.</span><span style="color:#6F42C1;">getObject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;sqlSessionTemplate&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Primary</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SqlSessionTemplate </span><span style="color:#6F42C1;">sqlSessionTemplate</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sqlSessionFactory&quot;</span><span style="color:#24292E;">) SqlSessionFactory </span><span style="color:#E36209;">sqlSessionFactory</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSessionTemplate</span><span style="color:#24292E;">(sqlSessionFactory);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="mybatis中的jdbctype" tabindex="-1">mybatis中的jdbcType <a class="header-anchor" href="#mybatis中的jdbctype" aria-label="Permalink to &quot;mybatis中的jdbcType&quot;">​</a></h2><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">insert</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">id</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;insert&quot;</span><span style="color:#ADBAC7;">  </span><span style="color:#6CB6FF;">parameterType</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;java.xx.xx&quot;</span><span style="color:#ADBAC7;"> &gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    insert into table values name = #{name,jdbcType=VARCHAR}　</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">insert</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">// jdbcType=VARCHAR,这是为了程序的安全性。</span></span>
<span class="line"><span style="color:#ADBAC7;">// 当传入的参数name为空时不会使程序出现问题；当name为空时，mybatis不知道具体要转换成什么jdbcType类型，有些特殊情况会报错</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">insert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;insert&quot;</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">parameterType</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;java.xx.xx&quot;</span><span style="color:#24292E;"> &gt;</span></span>
<span class="line"><span style="color:#24292E;">    insert into table values name = #{name,jdbcType=VARCHAR}　</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">insert</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">// jdbcType=VARCHAR,这是为了程序的安全性。</span></span>
<span class="line"><span style="color:#24292E;">// 当传入的参数name为空时不会使程序出现问题；当name为空时，mybatis不知道具体要转换成什么jdbcType类型，有些特殊情况会报错</span></span></code></pre></div>`,27);function q(s,E,b,h,S,f){const o=t,e=c("ClientOnly");return l(),y("div",null,[F,i(e,null,{default:A(()=>{var a,n;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=s.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(l(),u(o,{key:0,article:s.$frontmatter},null,8,["article"])):B("",!0)]}),_:1}),m])}const v=r(d,[["render",q]]);export{_ as __pageData,v as default};
