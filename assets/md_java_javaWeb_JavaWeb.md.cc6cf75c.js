import{_ as o}from"./chunks/ArticleMetadata.8b6b367a.js";import{_ as r,H as c,o as e,c as i,J as y,E as d,C as n,a as A,V as h,D,G as m}from"./chunks/framework.981adca9.js";const k=JSON.parse('{"title":"JavaWeb杂叙","description":"","frontmatter":{"title":"JavaWeb杂叙","author":"Charles Chu","date":"2023/03/11","isOriginal":true,"outline":"deep"},"headers":[],"relativePath":"md/java/javaWeb/JavaWeb.md","filePath":"md/java/javaWeb/JavaWeb.md","lastUpdated":1691826114000}'),C={name:"md/java/javaWeb/JavaWeb.md"},v=n("h1",{id:"javaweb杂叙",tabindex:"-1"},[A("JavaWeb杂叙 "),n("a",{class:"header-anchor",href:"#javaweb杂叙","aria-label":'Permalink to "JavaWeb杂叙"'},"​")],-1),g=h(`<h2 id="filter-过滤器" tabindex="-1">Filter(过滤器) <a class="header-anchor" href="#filter-过滤器" aria-label="Permalink to &quot;Filter(过滤器)&quot;">​</a></h2><h3 id="步骤" tabindex="-1">步骤 <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><ol><li>定义一个类，实现接口Filter</li><li>复写方法</li><li>配置拦截路径：1) web.xml；2) 注解</li></ol><h3 id="过滤器细节" tabindex="-1">过滤器细节 <a class="header-anchor" href="#过滤器细节" aria-label="Permalink to &quot;过滤器细节&quot;">​</a></h3><h4 id="_1-web-xml配置" tabindex="-1">1. web.xml配置 <a class="header-anchor" href="#_1-web-xml配置" aria-label="Permalink to &quot;1. web.xml配置&quot;">​</a></h4><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">filter</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">filter-name</span><span style="color:#ADBAC7;">&gt;demo1&lt;/</span><span style="color:#8DDB8C;">filter-name</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">filter-class</span><span style="color:#ADBAC7;">&gt;cn.itcast.web.filter.FilterDemo1&lt;/</span><span style="color:#8DDB8C;">filter-class</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">filter</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">filter-mapping</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">filter-name</span><span style="color:#ADBAC7;">&gt;demo1&lt;/</span><span style="color:#8DDB8C;">filter-name</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">&lt;!-- 拦截路径 --&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">url-pattern</span><span style="color:#ADBAC7;">&gt;/*&lt;/</span><span style="color:#8DDB8C;">url-pattern</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">filter-mapping</span><span style="color:#ADBAC7;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">filter</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">filter-name</span><span style="color:#24292E;">&gt;demo1&lt;/</span><span style="color:#22863A;">filter-name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">filter-class</span><span style="color:#24292E;">&gt;cn.itcast.web.filter.FilterDemo1&lt;/</span><span style="color:#22863A;">filter-class</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">filter</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">filter-mapping</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">filter-name</span><span style="color:#24292E;">&gt;demo1&lt;/</span><span style="color:#22863A;">filter-name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 拦截路径 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">url-pattern</span><span style="color:#24292E;">&gt;/*&lt;/</span><span style="color:#22863A;">url-pattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">filter-mapping</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h4 id="_2-过滤器执行流程" tabindex="-1">2. 过滤器执行流程 <a class="header-anchor" href="#_2-过滤器执行流程" aria-label="Permalink to &quot;2. 过滤器执行流程&quot;">​</a></h4><p> a. 执行过滤器</p><p> b. 执行放行后的资源：filterChain.doFilter(servletRequest,ervletResponse)</p><p> c. 回来执行过滤器放行代码下边的代码</p><h4 id="_3-过滤器生命周期方法" tabindex="-1">3. 过滤器生命周期方法 <a class="header-anchor" href="#_3-过滤器生命周期方法" aria-label="Permalink to &quot;3. 过滤器生命周期方法&quot;">​</a></h4><p> a. init:在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次。用于加载资源</p><p> b. doFilter:每一次请求被拦截资源时，会执行。执行多次</p><p> c. destroy:在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。只执行一次。用于释放资源</p><h4 id="_4-过滤器配置详解" tabindex="-1">4. 过滤器配置详解 <a class="header-anchor" href="#_4-过滤器配置详解" aria-label="Permalink to &quot;4. 过滤器配置详解&quot;">​</a></h4><h5 id="拦截路径配置" tabindex="-1">拦截路径配置 <a class="header-anchor" href="#拦截路径配置" aria-label="Permalink to &quot;拦截路径配置&quot;">​</a></h5><p> a. 具体资源路径： /index.jsp 只有访问index.jsp资源时，过滤器才会被执行</p><p> b. 拦截目录： /user/* 访问/user下的所有资源时，过滤器都会被执行</p><p> c. 后缀名拦截： *.jsp 访问所有后缀名为jsp资源时，过滤器都会被执行</p><p> d. 拦截所有资源：/* 访问所有资源时，过滤器都会被执行</p><h5 id="拦截方式配置-资源被访问的方式" tabindex="-1">拦截方式配置(资源被访问的方式) <a class="header-anchor" href="#拦截方式配置-资源被访问的方式" aria-label="Permalink to &quot;拦截方式配置(资源被访问的方式)&quot;">​</a></h5><ul><li>注解配置</li></ul><p> 设置dispatcherTypes属性</p><p> 1. REQUEST：默认值。浏览器直接请求资源</p><p> 2. FORWARD：转发访问资源</p><p> 3. INCLUDE：包含访问资源</p><p> 4. ERROR：错误跳转资源</p><p> 5. ASYNC：异步访问资源</p><ul><li>web.xml配置</li></ul><p> 设置标签即可</p><h4 id="_5-过滤器链-配置多个过滤器" tabindex="-1">5. 过滤器链(配置多个过滤器) <a class="header-anchor" href="#_5-过滤器链-配置多个过滤器" aria-label="Permalink to &quot;5. 过滤器链(配置多个过滤器)&quot;">​</a></h4><p> 执行顺序：如果有两个过滤器：过滤器1和过滤器2</p><ol><li>过滤器1</li><li>过滤器2</li><li>资源执行</li><li>过滤器2</li><li>过滤器1</li></ol><h5 id="过滤器先后顺序问题" tabindex="-1">过滤器先后顺序问题 <a class="header-anchor" href="#过滤器先后顺序问题" aria-label="Permalink to &quot;过滤器先后顺序问题&quot;">​</a></h5><ol><li>注解配置：按照类名的字符串比较规则比较，值小的先执行，如： AFilter 和 BFilter，AFilter就先执行了。</li><li>web.xml配置： 谁定义在上边，谁先执行</li></ol><h2 id="servlet" tabindex="-1">servlet <a class="header-anchor" href="#servlet" aria-label="Permalink to &quot;servlet&quot;">​</a></h2><p>  在web.xml中配置Servlet</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">servlet</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#8DDB8C;">servlet-name</span><span style="color:#ADBAC7;">&gt;demo1&lt;/</span><span style="color:#8DDB8C;">servlet-name</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#8DDB8C;">servlet-class</span><span style="color:#ADBAC7;">&gt;cn.itcast.web.servlet.ServletDemo1&lt;/</span><span style="color:#8DDB8C;">servlet-class</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">servlet</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;"> </span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">servlet-mapping</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#8DDB8C;">servlet-name</span><span style="color:#ADBAC7;">&gt;demo1&lt;/</span><span style="color:#8DDB8C;">servlet-name</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">  &lt;</span><span style="color:#8DDB8C;">url-pattern</span><span style="color:#ADBAC7;">&gt;/demo1&lt;/</span><span style="color:#8DDB8C;">url-pattern</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">servlet-mapping</span><span style="color:#ADBAC7;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">servlet</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">servlet-name</span><span style="color:#24292E;">&gt;demo1&lt;/</span><span style="color:#22863A;">servlet-name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">servlet-class</span><span style="color:#24292E;">&gt;cn.itcast.web.servlet.ServletDemo1&lt;/</span><span style="color:#22863A;">servlet-class</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">servlet</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">servlet-mapping</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">servlet-name</span><span style="color:#24292E;">&gt;demo1&lt;/</span><span style="color:#22863A;">servlet-name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">url-pattern</span><span style="color:#24292E;">&gt;/demo1&lt;/</span><span style="color:#22863A;">url-pattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">servlet-mapping</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="执行原理" tabindex="-1">执行原理 <a class="header-anchor" href="#执行原理" aria-label="Permalink to &quot;执行原理&quot;">​</a></h3><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的<code>&lt;url-pattern&gt;</code>标签体内容。</li><li>如果有，则在找到对应的<code>&lt;servlet-class&gt;</code>全类名</li><li>tomcat会将字节码文件加载进内存，并且创建其对象（创建对象：newInstance()）</li><li>调用其方法 （service）</li></ol><h3 id="servlet中的生命周期方法" tabindex="-1">Servlet中的生命周期方法 <a class="header-anchor" href="#servlet中的生命周期方法" aria-label="Permalink to &quot;Servlet中的生命周期方法&quot;">​</a></h3><ol><li><p>被创建：执行init方法，只执行一次。</p><ul><li><p>默认情况下，第一次被访问时，Servlet被创建；</p></li><li><p>可以配置执行Servlet的创建时机；</p><p>在<code>&lt;servlet&gt;</code>标签下配置</p><ol><li><p>第一次被访问时，创建： <code>&lt;load-on-startup&gt;</code>的值为负数</p></li><li><p>在服务器启动时，创建：<code>&lt;load-on-startup&gt;</code>的值为0或正整数</p></li></ol></li><li><p>Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的。</p><p>多个用户同时访问时，可能存在线程安全问题。尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值。</p></li></ul></li><li><p>提供服务：执行service方法，执行多次。</p><ul><li>每次访问Servlet时，Service方法都会被调用一次。</li></ul></li><li><p>被销毁：执行destroy方法，只执行一次。</p><ul><li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁</li><li>只有服务器正常关闭时，才会执行destroy方法。</li><li>destroy方法在Servlet被销毁之前执行，一般用于释放资源</li></ul></li></ol>`,42);function u(s,B,b,f,E,_){const t=o,p=c("ClientOnly");return e(),i("div",null,[v,y(p,null,{default:d(()=>{var l,a;return[(((l=s.$frontmatter)==null?void 0:l.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(e(),D(t,{key:0,article:s.$frontmatter},null,8,["article"])):m("",!0)]}),_:1}),g])}const S=r(C,[["render",u]]);export{k as __pageData,S as default};
