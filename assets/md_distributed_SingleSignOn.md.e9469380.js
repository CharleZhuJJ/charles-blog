import{_ as h}from"./chunks/ArticleMetadata.8b6b367a.js";import{_,H as a,o as l,c as m,C as n,a as t,J as o,E as p,V as g,D as u,G as S}from"./chunks/framework.981adca9.js";const b="/charles-blog/assets/SessionMechanism.c60e811e.png",f="/charles-blog/assets/SignOnStatus.08f650e9.png",q="/charles-blog/assets/SingleSignOn.3d10f85a.png",O="/charles-blog/assets/SignOff.adba8035.png",k="/charles-blog/assets/SingleSignOnDeployment.41836a7e.png",w=JSON.parse('{"title":"单点登陆","description":"","frontmatter":{"title":"单点登陆","author":"Charles Chu","date":"2021/07/09","isOriginal":true},"headers":[],"relativePath":"md/distributed/SingleSignOn.md","filePath":"md/distributed/SingleSignOn.md","lastUpdated":1691825438000}'),x={name:"md/distributed/SingleSignOn.md"},P={id:"单点登陆",tabindex:"-1"},C=n("a",{class:"header-anchor",href:"#单点登陆","aria-label":'Permalink to "单点登陆 <Badge text="持续更新" type="warning" />"'},"​",-1),v=g('<h2 id="单系统登陆" tabindex="-1">单系统登陆 <a class="header-anchor" href="#单系统登陆" aria-label="Permalink to &quot;单系统登陆&quot;">​</a></h2><h3 id="_1、会话机制" tabindex="-1">1、会话机制 <a class="header-anchor" href="#_1、会话机制" aria-label="Permalink to &quot;1、会话机制&quot;">​</a></h3><p>  浏览器第一次请求服务器，服务器创建一个会话，并将会话的 id 作为响应的一部分发送给浏览器，浏览器存储会话 id，并在后续第二次和第三次请求中带上会话 id，服务器取得请求中的会话 id 就知道是不是同一个用户了，这个过程用下图说明，后续请求与第一次请求产生了关联。 <img src="'+b+'" alt="SessionMechanism"></p><h3 id="_2、登陆状态" tabindex="-1">2、登陆状态 <a class="header-anchor" href="#_2、登陆状态" aria-label="Permalink to &quot;2、登陆状态&quot;">​</a></h3><p>  浏览器第一次请求服务器需要输入用户名与密码验证身份，服务器拿到用户名密码去数据库比对，正确的话说明当前持有这个会话的用户是合法用户，应该将这个会话标记为“已授权”或者“已登录”等等之类的状态，既然是会话的状态，自然要保存在会话对象中，tomcat 在会话对象中设置登录状态如下。 <img src="'+f+'" alt="SignOnStatus"></p><h2 id="单点登陆-1" tabindex="-1">单点登陆 <a class="header-anchor" href="#单点登陆-1" aria-label="Permalink to &quot;单点登陆&quot;">​</a></h2><p>  单点登录全称 Single Sign On（以下简称 SSO），是指在多系统应用群中登录一个系统，便可在其他所有系统中得到授权而无需再次登录，包括单点登录与单点注销两部分。</p><h3 id="_1、登陆" tabindex="-1">1、登陆 <a class="header-anchor" href="#_1、登陆" aria-label="Permalink to &quot;1、登陆&quot;">​</a></h3><p>  相比于单系统登录，sso 需要一个独立的认证中心，只有认证中心能接受用户的用户名密码等安全信息，其他系统不提供登录入口，只接受认证中心的间接授权。间接授权通过令牌实现，sso 认证中心验证用户的用户名密码没问题，创建授权令牌，在接下来的跳转过程中，授权令牌作为参数发送给各个子系统，子系统拿到令牌，即得到了授权，可以借此创建局部会话，局部会话登录方式与单系统的登录方式相同。这个过程，也就是单点登录的原理。 <img src="'+q+'" alt="SingleSignOn"></p><ol><li>用户访问系统 1 的受保护资源，系统 1 发现用户未登录，跳转至 sso 认证中心，并将自己的地址作为参数</li><li>sso 认证中心发现用户未登录，将用户引导至登录页面</li><li>用户输入用户名密码提交登录申请</li><li>sso 认证中心校验用户信息，创建用户与 sso 认证中心之间的会话，称为全局会话，同时创建授权令牌</li><li>sso 认证中心带着令牌跳转会最初的请求地址（系统 1）</li><li>系统 1 拿到令牌，去 sso 认证中心校验令牌是否有效</li><li>sso 认证中心校验令牌，返回有效，注册系统 1</li><li>系统 1 使用该令牌创建与用户的会话，称为局部会话，返回受保护资源</li><li>用户访问系统 2 的受保护资源</li><li>系统 2 发现用户未登录，跳转至 sso 认证中心，并将自己的地址作为参数</li><li>sso 认证中心发现用户已登录，跳转回系统 2 的地址，并附上令牌</li><li>系统 2 拿到令牌，去 sso 认证中心校验令牌是否有效</li><li>sso 认证中心校验令牌，返回有效，注册系统 2</li><li>系统 2 使用该令牌创建与用户的局部会话，返回受保护资源</li></ol><h3 id="_2、注销" tabindex="-1">2、注销 <a class="header-anchor" href="#_2、注销" aria-label="Permalink to &quot;2、注销&quot;">​</a></h3><p>  在一个子系统中注销，所有子系统的会话都将被销毁 <img src="'+O+'" alt="SignOff"></p><p>  sso 认证中心一直监听全局会话的状态，一旦全局会话销毁，监听器将通知所有注册系统执行注销操作</p><ol><li>用户向系统 1 发起注销请求</li><li>系统 1 根据用户与系统 1 建立的会话 id 拿到令牌，向 sso 认证中心发起注销请求</li><li>sso 认证中心校验令牌有效，销毁全局会话，同时取出所有用此令牌注册的系统地址</li><li>sso 认证中心向所有注册系统发起注销请求</li><li>各注册系统接收 sso 认证中心的注销请求，销毁局部会话</li><li>sso 认证中心引导用户至登录页面</li></ol><h2 id="单点登陆部署图" tabindex="-1">单点登陆部署图 <a class="header-anchor" href="#单点登陆部署图" aria-label="Permalink to &quot;单点登陆部署图&quot;">​</a></h2><p>  单点登录涉及 sso 认证中心与众子系统，子系统与 sso 认证中心需要通信以交换令牌、校验令牌及发起注销请求，因而子系统必须集成 sso 的客户端，sso 认证中心则是 sso 服务端，整个单点登录过程实质是 sso 客户端与服务端通信的过程 <img src="'+k+'" alt="SingleSignOnDeployment"></p><h3 id="sso-client-实现的功能" tabindex="-1">sso-client 实现的功能 <a class="header-anchor" href="#sso-client-实现的功能" aria-label="Permalink to &quot;sso-client 实现的功能&quot;">​</a></h3><ol><li>拦截子系统未登录用户请求，跳转至 sso 认证中心</li><li>接收并存储 sso 认证中心发送的令牌</li><li>与 sso-server 通信，校验令牌的有效性</li><li>建立局部会话</li><li>拦截用户注销请求，向 sso 认证中心发送注销请求</li><li>接收 sso 认证中心发出的注销请求，销毁局部会话</li></ol><h3 id="sso-server-实现的功能" tabindex="-1">sso-server 实现的功能 <a class="header-anchor" href="#sso-server-实现的功能" aria-label="Permalink to &quot;sso-server 实现的功能&quot;">​</a></h3><ol><li>验证用户的登录信息</li><li>创建全局会话</li><li>创建授权令牌</li><li>与 sso-client 通信发送令牌</li><li>校验 sso-client 令牌有效性</li><li>系统注册</li><li>接收 sso-client 注销请求，注销所有会话</li></ol>',20);function V(e,y,B,N,T,$){const r=a("Badge"),c=h,d=a("ClientOnly");return l(),m("div",null,[n("h1",P,[t("单点登陆 "),o(r,{text:"持续更新",type:"warning"}),t(),C]),o(d,null,{default:p(()=>{var s,i;return[(((s=e.$frontmatter)==null?void 0:s.aside)??!0)&&(((i=e.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(l(),u(c,{key:0,article:e.$frontmatter},null,8,["article"])):S("",!0)]}),_:1}),v])}const M=_(x,[["render",V]]);export{w as __pageData,M as default};
