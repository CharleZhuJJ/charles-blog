import{_ as t}from"./chunks/ArticleMetadata.8b6b367a.js";import{_ as c,H as r,o as l,c as y,J as A,E as i,C as p,a as D,V as C,D as B,G as F}from"./chunks/framework.981adca9.js";const E="/charles-blog/assets/Module.c94e0f22.png",v=JSON.parse('{"title":"JMS","description":"","frontmatter":{"title":"JMS","author":"Charles Chu","date":"2021/09/30","isOriginal":true},"headers":[],"relativePath":"md/middleware/Jms.md","filePath":"md/middleware/Jms.md","lastUpdated":1695547548000}'),g={name:"md/middleware/Jms.md"},M=p("h1",{id:"jms",tabindex:"-1"},[D("JMS "),p("a",{class:"header-anchor",href:"#jms","aria-label":'Permalink to "JMS"'},"​")],-1),u=C('<p>  JMS（Java Messaging Service）是Java平台上有关面向消息中间件的技术规范，它便于消息系统中的Java应用程序进行消息交换,并且通过提供标准的产生、发送、接收消息的接口简化企业应用的开发。</p><p>  JMS本身只定义了一系列的接口规范，是一种与厂商无关的 API，用来访问消息收发系统。它类似于JDBC(java Database Connectivity)：这里，JDBC 是可以用来访问许多不同关系数据库的 API，而 JMS则提供同样与厂商无关的访问方法，以访问消息收发服务。</p><h2 id="jms编程api" tabindex="-1">JMS编程API <a class="header-anchor" href="#jms编程api" aria-label="Permalink to &quot;JMS编程API&quot;">​</a></h2><h3 id="_1-connectionfactory" tabindex="-1">1.ConnectionFactory <a class="header-anchor" href="#_1-connectionfactory" aria-label="Permalink to &quot;1.ConnectionFactory&quot;">​</a></h3><p>  创建Connection对象的工厂，针对两种不同的jms消息模型，分别有QueueConnectionFactory和TopicConnectionFactory两种。</p><h3 id="_2-destination" tabindex="-1">2.Destination <a class="header-anchor" href="#_2-destination" aria-label="Permalink to &quot;2.Destination&quot;">​</a></h3><p>  Destination的意思是消息生产者的消息发送目标或者说消息消费者的消息来源。对于消息生产者来说，它的Destination是某个队列（Queue）或某个主题（Topic）;对于消息消费者来说，它的Destination也是某个队列或主题（即消息来源）。所以，Destination实际上就是两种类型的对象：Queue、Topic</p><h3 id="_3-connection" tabindex="-1">3.Connection <a class="header-anchor" href="#_3-connection" aria-label="Permalink to &quot;3.Connection&quot;">​</a></h3><p>  Connection表示在客户端和JMS系统之间建立的链接（对TCP/IP socket的包装）。Connection可以产生一个或多个Session</p><h3 id="_4-session" tabindex="-1">4.Session <a class="header-anchor" href="#_4-session" aria-label="Permalink to &quot;4.Session&quot;">​</a></h3><p>  Session 是我们对消息进行操作的接口，可以通过session创建生产者、消费者、消息等。Session 提供了事务的功能，如果需要使用session发送/接收多个消息时，可以将这些发送/接收动作放到一个事务中。</p><h3 id="_5-producter" tabindex="-1">5.Producter <a class="header-anchor" href="#_5-producter" aria-label="Permalink to &quot;5.Producter&quot;">​</a></h3><p>  Producter（消息生产者）：消息生产者由Session创建，并用于将消息发送到Destination。同样，消息生产者分两种类型：QueueSender和TopicPublisher。可以调用消息生产者的方法（send或publish方法）发送消息。</p><h3 id="_6-consumer" tabindex="-1">6.Consumer <a class="header-anchor" href="#_6-consumer" aria-label="Permalink to &quot;6.Consumer&quot;">​</a></h3><p>  Consumer（消息消费者）：消息消费者由Session创建，用于接收被发送到Destination的消息。两种类型：QueueReceiver和TopicSubscriber。可分别通过session的createReceiver(Queue)或createSubscriber(Topic)来创建。当然，也可以session的creatDurableSubscriber方法来创建持久化的订阅者。</p><h3 id="_7-messagelistener" tabindex="-1">7.MessageListener <a class="header-anchor" href="#_7-messagelistener" aria-label="Permalink to &quot;7.MessageListener&quot;">​</a></h3><p>  消息监听器。如果注册了消息监听器，一旦消息到达，将自动调用监听器的onMessage方法。EJB中的MDB（Message-Driven Bean）就是一种MessageListener。 <img src="'+E+`" alt="Module"></p><h2 id="jms消息组成格式" tabindex="-1">JMS消息组成格式 <a class="header-anchor" href="#jms消息组成格式" aria-label="Permalink to &quot;JMS消息组成格式&quot;">​</a></h2><p>  整个JMS协议组成结构如下</p><table><thead><tr><th>结构</th><th>描述</th></tr></thead><tbody><tr><td>JMS Provider</td><td>消息中间件/消息服务器</td></tr><tr><td>JMS Producer</td><td>消息生产者</td></tr><tr><td>JMS Consumer</td><td>消息消费者</td></tr><tr><td>JMS Message</td><td>消息</td></tr></tbody></table><h3 id="jms-message" tabindex="-1">JMS Message <a class="header-anchor" href="#jms-message" aria-label="Permalink to &quot;JMS Message&quot;">​</a></h3><p>  JMS Message消息由三部分组成：消息头，消息体，消息属性；</p><h4 id="消息头" tabindex="-1">消息头 <a class="header-anchor" href="#消息头" aria-label="Permalink to &quot;消息头&quot;">​</a></h4><p>  JMS消息头预定义了若干字段用于客户端与JMS提供者之间识别和发送消息，预编译头如下：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>JMSDestination(*)</td><td>消息发送的 Destination，在发送过程中由提供者设置</td></tr><tr><td>JMSMessageID(*)</td><td>唯一标识提供者发送的每一条消息。这个字段是在发送过程中由提供者设置的，客户机只能在消息发送后才能确定消息的 JMSMessageID</td></tr><tr><td>JMSDeliveryMode(*)</td><td>消息持久化。包含值 DeliveryMode.PERSISTENT 或者DeliveryMode.NON_PERSISTENT。</td></tr><tr><td>JMSTimestamp</td><td>提供者发送消息的时间，由提供者在发送过程中设置</td></tr><tr><td>JMSExpiration(*)</td><td>消息失效的时间，毫秒，值 0 表明消息不会过期，默认值为0</td></tr><tr><td>JMSPriority(*)</td><td>消息的优先级，由提供者在发送过程中设置。优先级 0 的优先级最低，优先级 9 的优先级最高。0-4为普通消息，5-9为加急消息。ActiveMQ不保证优先级高就一定先发送，只保证了加急消息必须先于普通消息发送。默认值为4</td></tr><tr><td>JMSCorrelationID(*)</td><td>通常用来链接响应消息与请求消息，由发送消息的 JMS 程序设置。</td></tr><tr><td>JMSReplyTo</td><td>请求程序用它来指出回复消息应发送的地方，由发送消息的 JMS 程序设置</td></tr><tr><td>JMSTypeJMS</td><td>程序用它来指出消息的类型。</td></tr><tr><td>JMSRedelivered</td><td>消息的重发标志，false，代表该消息是第一次发生，true，代表该消息为重发消息</td></tr></tbody></table><p>  开发者只可以设置JMSCorrelationID，JMSReplyTo，JMSType。</p><h4 id="消息体" tabindex="-1">消息体 <a class="header-anchor" href="#消息体" aria-label="Permalink to &quot;消息体&quot;">​</a></h4><p>  在消息体中，JMS API定义了五种类型的消息格式，让我们可以以不同的形式发送和接受消息，并提供了对已有消息格式的兼容。</p><p>  JMS 定义了五种不同的消息正文格式，以及调用的消息类型，允许你发送并接收一些不同形式的数据，提供现有消息格式的一些级别的兼容性。</p><ul><li>TextMessage -- 一个字符串对象 *</li><li>MapMessage -- 一套名称-值对（Map）</li><li>ObjectMessage -- 一个序列化的 Java 对象 *</li><li>BytesMessage -- 一个字节的数据流 *</li><li>StreamMessage -- Java原始值的数据流</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">send</span><span style="color:#ADBAC7;">(){</span></span>
<span class="line"><span style="color:#ADBAC7;">    jmsTemplate.</span><span style="color:#DCBDFB;">send</span><span style="color:#ADBAC7;">(name, </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">MessageCreator</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">        @</span><span style="color:#F47067;">Override</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Message </span><span style="color:#DCBDFB;">createMessage</span><span style="color:#ADBAC7;">(Session </span><span style="color:#F69D50;">session</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">throws</span><span style="color:#ADBAC7;"> JMSException {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 发送TextMessage消息</span></span>
<span class="line"><span style="color:#ADBAC7;">            TextMessage</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">textMessage</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> session.</span><span style="color:#DCBDFB;">createTextMessage</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;文本消息&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> textMessage;</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 发送MapMessage消息</span></span>
<span class="line"><span style="color:#ADBAC7;">            MapMessage</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">mapMessage</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> session.</span><span style="color:#DCBDFB;">createMapMessage</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">            mapMessage.</span><span style="color:#DCBDFB;">setString</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;name&quot;</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&quot;张三&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">            mapMessage.</span><span style="color:#DCBDFB;">setInt</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;age&quot;</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> mapMessage;</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 发送ObjectMessage消息</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 注意：ActiveMQ5.12后，为了安全考虑，ActiveMQ默认不接受自定义的序列化对象，需要将自定义的加入到受信任的列表。</span></span>
<span class="line"><span style="color:#ADBAC7;">            User</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">user</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">User</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">            user.</span><span style="color:#DCBDFB;">setName</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;小苍&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">            user.</span><span style="color:#DCBDFB;">setAge</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">18</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">            ObjectMessage</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">objectMessage</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> session.</span><span style="color:#DCBDFB;">createObjectMessage</span><span style="color:#ADBAC7;">(user);</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> objectMessage;</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 发送BytesMessage消息</span></span>
<span class="line"><span style="color:#ADBAC7;">            BytesMessage</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">bytesMessage</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> session.</span><span style="color:#DCBDFB;">createBytesMessage</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">try</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">                File</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">file</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">File</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;d:/spring.jpg&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">                FileInputStream</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">in</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FileInputStream</span><span style="color:#ADBAC7;">(file);</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F47067;">byte</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">bytes</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">byte</span><span style="color:#ADBAC7;">[(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">)file.</span><span style="color:#DCBDFB;">length</span><span style="color:#ADBAC7;">()];</span></span>
<span class="line"><span style="color:#ADBAC7;">                in.</span><span style="color:#DCBDFB;">read</span><span style="color:#ADBAC7;">(bytes);</span></span>
<span class="line"><span style="color:#ADBAC7;">                bytesMessage.</span><span style="color:#DCBDFB;">writeBytes</span><span style="color:#ADBAC7;">(bytes);</span></span>
<span class="line"><span style="color:#ADBAC7;">            } </span><span style="color:#F47067;">catch</span><span style="color:#ADBAC7;"> (Exception </span><span style="color:#F69D50;">e</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">                e.</span><span style="color:#DCBDFB;">printStackTrace</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> bytesMessage;</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 发送StreamMessage消息</span></span>
<span class="line"><span style="color:#ADBAC7;">            StreamMessage</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">streamMessage</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> session.</span><span style="color:#DCBDFB;">createStreamMessage</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">            streamMessage.</span><span style="color:#DCBDFB;">writeString</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;你好，ActiveMQ&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">            streamMessage.</span><span style="color:#DCBDFB;">writeInt</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> streamMessage;</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    });</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">JmsListener</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">destination</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;\${activemq.name}&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">receive</span><span style="color:#ADBAC7;">(Message message){</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 接收TextMessage的方法</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;">(message </span><span style="color:#F47067;">instanceof</span><span style="color:#ADBAC7;"> TextMessage){</span></span>
<span class="line"><span style="color:#ADBAC7;">        TextMessage</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">textMessage</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (TextMessage)message;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">try</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;接收消息：&quot;</span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;">textMessage.</span><span style="color:#DCBDFB;">getText</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">        } </span><span style="color:#F47067;">catch</span><span style="color:#ADBAC7;"> (JMSException </span><span style="color:#F69D50;">e</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            e.</span><span style="color:#DCBDFB;">printStackTrace</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 接收MapMessage消息</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;">(message </span><span style="color:#F47067;">instanceof</span><span style="color:#ADBAC7;"> MapMessage){</span></span>
<span class="line"><span style="color:#ADBAC7;">        MapMessage</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">mapMessage</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (MapMessage)message;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">try</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;名称：&quot;</span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;">mapMessage.</span><span style="color:#DCBDFB;">getString</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;name&quot;</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#ADBAC7;">            System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;年龄：&quot;</span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;">mapMessage.</span><span style="color:#DCBDFB;">getString</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;age&quot;</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#ADBAC7;">        } </span><span style="color:#F47067;">catch</span><span style="color:#ADBAC7;"> (JMSException </span><span style="color:#F69D50;">e</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            e.</span><span style="color:#DCBDFB;">printStackTrace</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 接收ObjectMessage消息</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;">(message </span><span style="color:#F47067;">instanceof</span><span style="color:#ADBAC7;"> ObjectMessage){</span></span>
<span class="line"><span style="color:#ADBAC7;">        ObjectMessage</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">objectMessage</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (ObjectMessage)message;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">try</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            User</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">user</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (User)objectMessage.</span><span style="color:#DCBDFB;">getObject</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">            System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(user.</span><span style="color:#DCBDFB;">getUsername</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">            System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(user.</span><span style="color:#DCBDFB;">getPassword</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">        } </span><span style="color:#F47067;">catch</span><span style="color:#ADBAC7;"> (JMSException </span><span style="color:#F69D50;">e</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            e.</span><span style="color:#DCBDFB;">printStackTrace</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 接收BytesMessage消息</span></span>
<span class="line"><span style="color:#ADBAC7;">    BytesMessage</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">bytesMessage</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (BytesMessage)message;</span></span>
<span class="line"><span style="color:#ADBAC7;">    FileOutputStream</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">out</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FileOutputStream</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;d:/abc.jpg&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">byte</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">buf</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">byte</span><span style="color:#ADBAC7;">[(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">)bytesMessage.</span><span style="color:#DCBDFB;">getBodyLength</span><span style="color:#ADBAC7;">()];</span></span>
<span class="line"><span style="color:#ADBAC7;">    bytesMessage.</span><span style="color:#DCBDFB;">readBytes</span><span style="color:#ADBAC7;">(buf);</span></span>
<span class="line"><span style="color:#ADBAC7;">    out.</span><span style="color:#DCBDFB;">write</span><span style="color:#ADBAC7;">(buf);</span></span>
<span class="line"><span style="color:#ADBAC7;">    out.</span><span style="color:#DCBDFB;">close</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 接收StreamMessage消息</span></span>
<span class="line"><span style="color:#ADBAC7;">    StreamMessage</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">streamMessage</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (StreamMessage)message;</span></span>
<span class="line"><span style="color:#ADBAC7;">    String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">str</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> streamMessage.</span><span style="color:#DCBDFB;">readString</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">i</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> streamMessage.</span><span style="color:#DCBDFB;">readInt</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(str);</span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(i);</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    jmsTemplate.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(name, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageCreator</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Message </span><span style="color:#6F42C1;">createMessage</span><span style="color:#24292E;">(Session </span><span style="color:#E36209;">session</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> JMSException {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 发送TextMessage消息</span></span>
<span class="line"><span style="color:#24292E;">            TextMessage textMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> session.</span><span style="color:#6F42C1;">createTextMessage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;文本消息&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> textMessage;</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 发送MapMessage消息</span></span>
<span class="line"><span style="color:#24292E;">            MapMessage mapMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> session.</span><span style="color:#6F42C1;">createMapMessage</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            mapMessage.</span><span style="color:#6F42C1;">setString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            mapMessage.</span><span style="color:#6F42C1;">setInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mapMessage;</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 发送ObjectMessage消息</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 注意：ActiveMQ5.12后，为了安全考虑，ActiveMQ默认不接受自定义的序列化对象，需要将自定义的加入到受信任的列表。</span></span>
<span class="line"><span style="color:#24292E;">            User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            user.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;小苍&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            user.</span><span style="color:#6F42C1;">setAge</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">18</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            ObjectMessage objectMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> session.</span><span style="color:#6F42C1;">createObjectMessage</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> objectMessage;</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 发送BytesMessage消息</span></span>
<span class="line"><span style="color:#24292E;">            BytesMessage bytesMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> session.</span><span style="color:#6F42C1;">createBytesMessage</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                File file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;d:/spring.jpg&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                FileInputStream in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(file);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)file.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">()];</span></span>
<span class="line"><span style="color:#24292E;">                in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(bytes);</span></span>
<span class="line"><span style="color:#24292E;">                bytesMessage.</span><span style="color:#6F42C1;">writeBytes</span><span style="color:#24292E;">(bytes);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bytesMessage;</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 发送StreamMessage消息</span></span>
<span class="line"><span style="color:#24292E;">            StreamMessage streamMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> session.</span><span style="color:#6F42C1;">createStreamMessage</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            streamMessage.</span><span style="color:#6F42C1;">writeString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;你好，ActiveMQ&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            streamMessage.</span><span style="color:#6F42C1;">writeInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> streamMessage;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">JmsListener</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">destination</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${activemq.name}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">receive</span><span style="color:#24292E;">(Message message){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 接收TextMessage的方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(message </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> TextMessage){</span></span>
<span class="line"><span style="color:#24292E;">        TextMessage textMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (TextMessage)message;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;接收消息：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">textMessage.</span><span style="color:#6F42C1;">getText</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (JMSException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 接收MapMessage消息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(message </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> MapMessage){</span></span>
<span class="line"><span style="color:#24292E;">        MapMessage mapMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (MapMessage)message;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;名称：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">mapMessage.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;年龄：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">mapMessage.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (JMSException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 接收ObjectMessage消息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(message </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ObjectMessage){</span></span>
<span class="line"><span style="color:#24292E;">        ObjectMessage objectMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ObjectMessage)message;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (User)objectMessage.</span><span style="color:#6F42C1;">getObject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(user.</span><span style="color:#6F42C1;">getUsername</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(user.</span><span style="color:#6F42C1;">getPassword</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (JMSException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 接收BytesMessage消息</span></span>
<span class="line"><span style="color:#24292E;">    BytesMessage bytesMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (BytesMessage)message;</span></span>
<span class="line"><span style="color:#24292E;">    FileOutputStream out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;d:/abc.jpg&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] buf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)bytesMessage.</span><span style="color:#6F42C1;">getBodyLength</span><span style="color:#24292E;">()];</span></span>
<span class="line"><span style="color:#24292E;">    bytesMessage.</span><span style="color:#6F42C1;">readBytes</span><span style="color:#24292E;">(buf);</span></span>
<span class="line"><span style="color:#24292E;">    out.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(buf);</span></span>
<span class="line"><span style="color:#24292E;">    out.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 接收StreamMessage消息</span></span>
<span class="line"><span style="color:#24292E;">    StreamMessage streamMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (StreamMessage)message;</span></span>
<span class="line"><span style="color:#24292E;">    String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> streamMessage.</span><span style="color:#6F42C1;">readString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> streamMessage.</span><span style="color:#6F42C1;">readInt</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="消息属性" tabindex="-1">消息属性 <a class="header-anchor" href="#消息属性" aria-label="Permalink to &quot;消息属性&quot;">​</a></h4><p>  我们可以给消息设置自定义属性，这些属性主要是提供给应用程序的。对于实现消息过滤功能，消息属性非常有用，JMS API定义了一些标准属性，JMS服务提供者可以选择性的提供部分标准属性。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 自定义属性</span></span>
<span class="line"><span style="color:#ADBAC7;">message.</span><span style="color:#DCBDFB;">setStringProperty</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Property&quot;</span><span style="color:#ADBAC7;">,Property);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 自定义属性</span></span>
<span class="line"><span style="color:#24292E;">message.</span><span style="color:#6F42C1;">setStringProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Property&quot;</span><span style="color:#24292E;">,Property);</span></span></code></pre></div>`,34);function d(s,m,S,h,b,q){const e=t,o=r("ClientOnly");return l(),y("div",null,[M,A(o,null,{default:i(()=>{var a,n;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=s.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(l(),B(e,{key:0,article:s.$frontmatter},null,8,["article"])):F("",!0)]}),_:1}),u])}const x=c(g,[["render",d]]);export{v as __pageData,x as default};
