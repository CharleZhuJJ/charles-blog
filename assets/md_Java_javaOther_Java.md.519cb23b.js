import{_ as e}from"./chunks/ArticleMetadata.4c626a83.js";import{_ as r,D as c,o as l,c as y,G as i,B as d,z as o,a as A,R as D,A as u,C}from"./chunks/framework.ef995079.js";const B="/charles-blog/assets/Jdk.851843e2.png",g=JSON.parse('{"title":"Java 杂叙","description":"","frontmatter":{},"headers":[],"relativePath":"md/Java/javaOther/Java.md","filePath":"md/Java/javaOther/Java.md","lastUpdated":1688441607000}'),F={name:"md/Java/javaOther/Java.md"},q=o("h1",{id:"java-杂叙",tabindex:"-1"},[A("Java 杂叙 "),o("a",{class:"header-anchor",href:"#java-杂叙","aria-label":'Permalink to "Java 杂叙"'},"​")],-1),E=D('<h2 id="java" tabindex="-1">Java <a class="header-anchor" href="#java" aria-label="Permalink to &quot;Java&quot;">​</a></h2><p>  Java 是一种面向对象的语言，有两个明显特性：</p><ul><li>跨平台能力：一次编写，到处运行（Write once，run anywhere）；</li><li>垃圾收集：</li></ul><p>  Java 通过字节码和 Java 虚拟机（JVM）这种跨平台的抽象，屏蔽了操作系统和硬件的细节，这也是实现「一次编译，到处执行」的基础。</p><p>  Java 通过垃圾收集器（Garbage Collector）回收分配内存，大部分情况下，程序员不需要自己操心内存的分配和回收。</p><h2 id="jvm、jre、jdk-关系" tabindex="-1">JVM、JRE、JDK 关系 <a class="header-anchor" href="#jvm、jre、jdk-关系" aria-label="Permalink to &quot;JVM、JRE、JDK 关系&quot;">​</a></h2><ul><li>JVM：Java Virtual Machine 是 Java 虚拟机，Java 程序需要运行在虚拟机上，不同的平台有自己的虚拟机，因此 Java 语言可以实现跨平台。</li><li>JRE：Java Runtime Environment，包括 Java 虚拟机和 Java 程序所需的核心类库等。 <ul><li>核心类库主要是 java.lang 包：包含了运行 Java 程序必不可少的系统类，如基本数据类型、基本数学函数、字符串处理、线程、异常处理类等，系统缺省加载这个包如果想要运行一个开发好的 Java 程序，计算机中只需要安装 JRE 即可。</li></ul></li><li>JDK：Java Development Kit是提供给 Java 开发人员使用的，其中包含了 Java 的开发工具，也包括了 JRE。</li></ul><p>  所以安装了 JDK，就无需再单独安装 JRE 了。其中的开发工具：编译工具(javac.exe)，打包工具(jar.exe) 等。</p><p><img src="'+B+`" alt="jdk"></p><h2 id="面向对象四大特性" tabindex="-1">面向对象四大特性 <a class="header-anchor" href="#面向对象四大特性" aria-label="Permalink to &quot;面向对象四大特性&quot;">​</a></h2><h3 id="_1、抽象" tabindex="-1">1、抽象 <a class="header-anchor" href="#_1、抽象" aria-label="Permalink to &quot;1、抽象&quot;">​</a></h3><p>  抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。</p><p>  另外，抽象是一个宽泛的设计思想，开发者能不能设计好代码，抽象能力也至关重要。</p><p>  很多设计原则都体现了抽象这种设计思想，比如基于接口而非实现编程、开闭原则（对扩展开放、对修改关闭）、代码解耦（降低代码的耦合性）等。</p><p>  在面对复杂系统的时候，人脑能承受的信息复杂程度是有限的，所以我们必须忽略掉一些非关键性的实现细节。</p><h3 id="_2、封装" tabindex="-1">2、封装 <a class="header-anchor" href="#_2、封装" aria-label="Permalink to &quot;2、封装&quot;">​</a></h3><p>  把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。</p><p>  通过封装，只需要暴露必要的方法给调用者，调用者不必了解背后的业务细节，用错的概率就减少。</p><h3 id="_3、继承" tabindex="-1">3、继承 <a class="header-anchor" href="#_3、继承" aria-label="Permalink to &quot;3、继承&quot;">​</a></h3><p>  使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。</p><p>  通过使用继承我们能够非常方便地复用以前的代码，需要注意的是，过度使用继承，层级深就会导致代码可读性和可维护性变差。</p><p>  关于继承如下 3 点请记住：</p><ul><li>子类拥有父类非 private 的属性和方法。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。</li></ul><h3 id="_4、多态" tabindex="-1">4、多态 <a class="header-anchor" href="#_4、多态" aria-label="Permalink to &quot;4、多态&quot;">​</a></h3><p>  所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定。即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>  在 Java 中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。</p><p>  多态也是很多设计模式、设计原则、编程技巧的代码实现基础，比如策略模式、基于接口而非实现编程、依赖倒置原则、里式替换原则、利用多态去掉冗长的 if-else 语句等等。</p><h2 id="java-语言是如何实现多态的" tabindex="-1">Java 语言是如何实现多态的 <a class="header-anchor" href="#java-语言是如何实现多态的" aria-label="Permalink to &quot;Java 语言是如何实现多态的&quot;">​</a></h2><p>  Java 实现多态有三个必要条件：继承、重写、向上转型。</p><ul><li>继承：在多态中必须存在有继承关系的子类和父类。</li><li>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。</li><li>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。</li></ul><p>  只有满足了上述三个条件，我们才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而达到执行不同的行为。</p><h2 id="重载与重写" tabindex="-1">重载与重写 <a class="header-anchor" href="#重载与重写" aria-label="Permalink to &quot;重载与重写&quot;">​</a></h2><p>  方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。</p><ul><li>重载：发生在同一个类中，方法名相同参数列表不同（参数类型不同、个数不同、顺序不同），与方法返回值和访问修饰符无关，即重载的方法不能根据返回类型进行区分。</li><li>重写：发生在父子类中，方法名、参数列表必须相同，返回值小于等于父类，抛出的异常小于等于父类，访问修饰符大于等于父类（里氏代换原则）；如果父类方法访问修饰符为 private 则子类中就不是重写。</li></ul><h2 id="java对象-po、bo、vo、dto、dao、pojo" tabindex="-1">java对象-PO、BO、VO、DTO、DAO、POJO <a class="header-anchor" href="#java对象-po、bo、vo、dto、dao、pojo" aria-label="Permalink to &quot;java对象-PO、BO、VO、DTO、DAO、POJO&quot;">​</a></h2><h3 id="po-persistant-object-持久对象" tabindex="-1">PO(Persistant Object) 持久对象 <a class="header-anchor" href="#po-persistant-object-持久对象" aria-label="Permalink to &quot;PO(Persistant Object) 持久对象&quot;">​</a></h3><ul><li>用于表示数据库中的一条记录映射成的 java 对象。PO 仅仅用于表示数据，没有任何数据操作。通常遵守 Java Bean 的规范，拥有 getter/setter 方法。</li><li>可以理解一个PO就是数据库中的一条记录；可以理解某个事务依赖的原始数据；好处是可以将一条记录最为一个对象处理，可以方便转化为其他对象</li></ul><h3 id="bo-business-object-业务对象" tabindex="-1">BO(Business Object) 业务对象 <a class="header-anchor" href="#bo-business-object-业务对象" aria-label="Permalink to &quot;BO(Business Object) 业务对象&quot;">​</a></h3><ul><li>封装对象、复杂对象，里面可能包含多个类主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。</li><li>比如一个简历，有教育经历、工作经历、社会关系等等。我们可以把教育经历对应一个PO，工作经历对应一个PO，社会关系对应一个PO。建立一个对应简历的BO对象处理简历，每个BO包含这些PO。这样处理业务逻辑时，我们就可以针对BO去处理。</li></ul><h3 id="vo-value-object-表现对象" tabindex="-1">VO(Value Object) 表现对象 <a class="header-anchor" href="#vo-value-object-表现对象" aria-label="Permalink to &quot;VO(Value Object) 表现对象&quot;">​</a></h3><ul><li>前端界面展示；value object值对象；ViewObject表现层对象；主要对应界面显示的数据对象。对于一个WEB页面，或者SWT、SWING的一个界面，用一个VO对象对应整个界面的值；对于Android而言即是activity或view中的数据元素。</li><li>用于表示一个与前端进行交互的 java 对象。有的朋友也许有疑问，这里可不可以使用 PO 传递数据？实际上，这里的 VO 只包含前端需要展示的数据即可，对于前端不需要的数据，比如数据创建和修改的时间等字段，出于减少传输数据量大小和保护数据库结构不外泄的目的，不应该在 VO 中体现出来。通常遵守 Java Bean 的规范，拥有 getter/setter 方法。</li></ul><h3 id="dto-data-transfer-object-数据传输对象" tabindex="-1">DTO(Data Transfer Object) 数据传输对象 <a class="header-anchor" href="#dto-data-transfer-object-数据传输对象" aria-label="Permalink to &quot;DTO(Data Transfer Object) 数据传输对象&quot;">​</a></h3><ul><li>前端调用时传输；也可理解成“上层”调用时传输;比如我们一张表有100个字段，那么对应的PO就有100个属性。但是我们界面上只要显示10个字段，客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端，这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构.到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO.</li><li>用于表示一个数据传输对象。DTO 通常用于不同服务或服务不同分层之间的数据传输。DTO 与 VO 概念相似，并且通常情况下字段也基本一致。但 DTO 与 VO 又有一些不同，这个不同主要是设计理念上的，比如 API 服务需要使用的 DTO 就可能与 VO 存在差异。通常遵守 Java Bean 的规范，拥有 getter/setter 方法</li></ul><h3 id="dao-data-access-object-数据访问对象" tabindex="-1">DAO(Data access object) 数据访问对象 <a class="header-anchor" href="#dao-data-access-object-数据访问对象" aria-label="Permalink to &quot;DAO(Data access object) 数据访问对象&quot;">​</a></h3><ul><li>这个最熟悉，和上面几个O区别最大，基本没有互相转化的可能性和必要.，主要用来封装对数据库的访问。通过它可以把POJO持久化为PO，用PO组装出来VO、DTO；</li><li>用于表示一个数据访问对象。使用 DAO 访问数据库，包括插入、更新、删除、查询等操作，与 PO 一起使用。DAO 一般在持久层，完全封装数据库操作，对外暴露的方法使得上层应用不需要关注数据库相关的任何信息。</li></ul><h3 id="pojo-plain-ordinary-java-object-简单java对象" tabindex="-1">POJO(Plain ordinary java object) 简单java对象 <a class="header-anchor" href="#pojo-plain-ordinary-java-object-简单java对象" aria-label="Permalink to &quot;POJO(Plain ordinary java object) 简单java对象&quot;">​</a></h3><ul><li>一个POJO持久化以后就是PO；直接用它传递、传递过程中就是DTO；直接用来对应表示层就是VO。</li></ul><h2 id="wait-和-sleep" tabindex="-1">wait() 和 sleep <a class="header-anchor" href="#wait-和-sleep" aria-label="Permalink to &quot;wait() 和 sleep&quot;">​</a></h2><h3 id="来源不同" tabindex="-1">来源不同 <a class="header-anchor" href="#来源不同" aria-label="Permalink to &quot;来源不同&quot;">​</a></h3><ul><li>sleep()来自 Thread 类；</li><li>wait()来自 Object 类。</li></ul><h3 id="对于同步锁的影响不同" tabindex="-1">对于同步锁的影响不同 <a class="header-anchor" href="#对于同步锁的影响不同" aria-label="Permalink to &quot;对于同步锁的影响不同&quot;">​</a></h3><ul><li>sleep()不会该表同步锁的行为，如果当前线程持有同步锁，那么 sleep 是不会让线程释放同步锁的。</li><li>wait()会释放同步锁，让其他线程进入 synchronized 代码块执行。</li></ul><h3 id="使用范围不同" tabindex="-1">使用范围不同 <a class="header-anchor" href="#使用范围不同" aria-label="Permalink to &quot;使用范围不同&quot;">​</a></h3><ul><li>sleep()可以在任何地方使用。</li><li>wait()只能在同步控制方法或者同步控制块里面使用，否则会抛 IllegalMonitorStateException。</li></ul><h3 id="恢复方式不同" tabindex="-1">恢复方式不同 <a class="header-anchor" href="#恢复方式不同" aria-label="Permalink to &quot;恢复方式不同&quot;">​</a></h3><p>  两者会暂停当前线程，但是在恢复上不太一样。</p><ul><li>sleep()在时间到了之后会重新恢复；</li><li>wait()则需要其他线程调用同一对象的 notify()/nofityAll()才能重新恢复。</li></ul><h2 id="string-format" tabindex="-1">String.format <a class="header-anchor" href="#string-format" aria-label="Permalink to &quot;String.format&quot;">​</a></h2><p>  用于创建格式化的字符串以及连接多个字符串对象。</p><p>  format(String format, Object... args) 新字符串使用本地语言环境，制定字符串格式和参数生成格式化的新字符串。</p><p>  format(Locale locale, String format, Object... args) 使用指定的语言环境，制定字符串格式和参数生成格式化的字符串。</p><h3 id="_1、显示不同转换符实现不同数据类型到字符串的转换" tabindex="-1">1、显示不同转换符实现不同数据类型到字符串的转换 <a class="header-anchor" href="#_1、显示不同转换符实现不同数据类型到字符串的转换" aria-label="Permalink to &quot;1、显示不同转换符实现不同数据类型到字符串的转换&quot;">​</a></h3><table><thead><tr><th>转 换 符</th><th>说 明</th><th>示 例</th></tr></thead><tbody><tr><td>%s</td><td>字符串类型</td><td>&quot;mingrisoft&quot;</td></tr><tr><td>%c</td><td>字符类型</td><td>&#39;m&#39;</td></tr><tr><td>%b</td><td>布尔类型</td><td>true</td></tr><tr><td>%d</td><td>整数类型（十进制）</td><td>99</td></tr><tr><td>%x</td><td>整数类型（十六进制）</td><td>FF</td></tr><tr><td>%o</td><td>整数类型（八进制）</td><td>77</td></tr><tr><td>%f</td><td>浮点类型</td><td>99.99</td></tr><tr><td>%a</td><td>十六进制浮点类型</td><td>FF.35AE</td></tr><tr><td>%e</td><td>指数类型</td><td>9.38e+5</td></tr><tr><td>%g</td><td>通用浮点类型（f和e类型中较短的）</td><td></td></tr><tr><td>%h</td><td>散列码</td><td></td></tr><tr><td>%%</td><td>百分比类型</td><td>％</td></tr><tr><td>%n</td><td>换行符</td><td></td></tr><tr><td>%tx</td><td>日期与时间类型（x代表不同的日期与时间转换符）</td><td></td></tr></tbody></table><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">String</span><span style="color:#ADBAC7;">[] args) {  </span></span>
<span class="line"><span style="color:#ADBAC7;">    String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">str</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;  </span></span>
<span class="line"><span style="color:#ADBAC7;">    str</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">String.</span><span style="color:#DCBDFB;">format</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Hi,%s&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;王力&quot;</span><span style="color:#ADBAC7;">);  </span><span style="color:#768390;">//Hi,王力 </span></span>
<span class="line"><span style="color:#ADBAC7;">    str</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">String.</span><span style="color:#DCBDFB;">format</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Hi,%s:%s.%s&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;王南&quot;</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&quot;王力&quot;</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&quot;王张&quot;</span><span style="color:#ADBAC7;">); </span><span style="color:#768390;">//Hi,王南:王力.王张  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;字母a的大写是：%c %n&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&#39;A&#39;</span><span style="color:#ADBAC7;">);  </span><span style="color:#768390;">//字母a的大写是：A</span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;3&gt;7的结果是：%b %n&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">3</span><span style="color:#F47067;">&gt;</span><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;">);  </span><span style="color:#768390;">//3&gt;7的结果是：false </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;100的一半是：%d %n&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">100</span><span style="color:#F47067;">/</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">);  </span><span style="color:#768390;">//100的一半是：50  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;100的16进制数是：%x %n&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">);  </span><span style="color:#768390;">//100的16进制数是：64 </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;100的8进制数是：%o %n&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">);  </span><span style="color:#768390;">//100的8进制数是：144  </span></span>
<span class="line"><span style="color:#ADBAC7;">   System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;50元的书打8.5折扣是：%f 元%n&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">50</span><span style="color:#F47067;">*</span><span style="color:#6CB6FF;">0.85</span><span style="color:#ADBAC7;">);  </span><span style="color:#768390;">//50元的书打8.5折扣是：42.500000 元</span></span>
<span class="line"><span style="color:#ADBAC7;">   System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;上面价格的16进制数是：%a %n&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">50</span><span style="color:#F47067;">*</span><span style="color:#6CB6FF;">0.85</span><span style="color:#ADBAC7;">); </span><span style="color:#768390;">//上面价格的16进制数是：0x1.54p5  </span></span>
<span class="line"><span style="color:#ADBAC7;">   System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;上面价格的指数表示：%e %n&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">50</span><span style="color:#F47067;">*</span><span style="color:#6CB6FF;">0.85</span><span style="color:#ADBAC7;">);  </span><span style="color:#768390;">//上面价格的指数表示：4.250000e+01</span></span>
<span class="line"><span style="color:#ADBAC7;">   System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;上面价格的指数和浮点数结果的长度较短的是：%g %n&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">50</span><span style="color:#F47067;">*</span><span style="color:#6CB6FF;">0.85</span><span style="color:#ADBAC7;">);  </span><span style="color:#768390;">//42.5000</span></span>
<span class="line"><span style="color:#ADBAC7;">   System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;上面的折扣是%d%% %n&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">85</span><span style="color:#ADBAC7;">);  </span><span style="color:#768390;">//上面的折扣是85%  </span></span>
<span class="line"><span style="color:#ADBAC7;">   System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;字母A的散列码是：%h %n&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&#39;A&#39;</span><span style="color:#ADBAC7;">);  </span><span style="color:#768390;">//字母A的散列码是：41   </span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) {  </span></span>
<span class="line"><span style="color:#24292E;">    String str</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#24292E;">    str</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hi,%s&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;王力&quot;</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//Hi,王力 </span></span>
<span class="line"><span style="color:#24292E;">    str</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hi,%s:%s.%s&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;王南&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;王力&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;王张&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//Hi,王南:王力.王张  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;字母a的大写是：%c %n&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//字母a的大写是：A</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;3&gt;7的结果是：%b %n&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//3&gt;7的结果是：false </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;100的一半是：%d %n&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//100的一半是：50  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;100的16进制数是：%x %n&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//100的16进制数是：64 </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;100的8进制数是：%o %n&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//100的8进制数是：144  </span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;50元的书打8.5折扣是：%f 元%n&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">0.85</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//50元的书打8.5折扣是：42.500000 元</span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;上面价格的16进制数是：%a %n&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">0.85</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//上面价格的16进制数是：0x1.54p5  </span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;上面价格的指数表示：%e %n&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">0.85</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//上面价格的指数表示：4.250000e+01</span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;上面价格的指数和浮点数结果的长度较短的是：%g %n&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">0.85</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//42.5000</span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;上面的折扣是%d%% %n&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">85</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//上面的折扣是85%  </span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;字母A的散列码是：%h %n&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//字母A的散列码是：41   </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_2、搭配转换符的标志" tabindex="-1">2、搭配转换符的标志 <a class="header-anchor" href="#_2、搭配转换符的标志" aria-label="Permalink to &quot;2、搭配转换符的标志&quot;">​</a></h3><table><thead><tr><th>标 志</th><th>说 明</th><th>示 例</th><th>结 果</th></tr></thead><tbody><tr><td>+</td><td>为正数或者负数添加符号</td><td>(&quot;%+d&quot;,15)</td><td>+15</td></tr><tr><td>−</td><td>左对齐</td><td>(&quot;%-5d&quot;,15)</td><td>\\15···\\</td></tr><tr><td>0</td><td>数字前面补0</td><td>(&quot;%04d&quot;, 99)</td><td>0099</td></tr><tr><td>空格</td><td>在整数之前添加指定数量的空格</td><td>(&quot;% 4d&quot;, 99)</td><td>\\··99\\</td></tr><tr><td>,</td><td>以“,”对数字分组</td><td>(&quot;%,f&quot;, 9999.99)</td><td>9,999.990000</td></tr><tr><td>(</td><td>使用括号包含负数</td><td>(&quot;%(f&quot;, -99.99)</td><td>(99.990000)</td></tr><tr><td>#</td><td>如果是浮点数则包含小数点，如果是16进制或8进制则添加0x或0</td><td>(&quot;%#x&quot;, 99) / (&quot;%#o&quot;, 99)</td><td>0x63 / 0143</td></tr><tr><td>&lt;</td><td>格式化前一个转换符所描述的参数</td><td>(&quot;%f和%&lt;3.2f&quot;, 99.45)</td><td>99.450000和99.45</td></tr><tr><td>$</td><td>被格式化的参数索引</td><td>(&quot;%1$d,%2$s&quot;, 99,&quot;abc&quot;)</td><td>99,abc</td></tr></tbody></table><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">String</span><span style="color:#ADBAC7;">[] args) {  </span></span>
<span class="line"><span style="color:#ADBAC7;">    String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">str</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;  </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//$使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    str</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">String.</span><span style="color:#DCBDFB;">format</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;格式参数$的使用：%1$d,%2$s&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">99</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&quot;abc&quot;</span><span style="color:#ADBAC7;">); </span><span style="color:#768390;">//格式参数$的使用：99,abc                        </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//+使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;显示正负数的符号：%+d与%d%n&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">99</span><span style="color:#ADBAC7;">,</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">99</span><span style="color:#ADBAC7;">);  </span><span style="color:#768390;">//显示正负数的符号：+99与-99 </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//补O使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;最牛的编号是：%03d%n&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;">);  </span><span style="color:#768390;">//最牛的编号是：007  </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//空格使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Tab键的效果是：% 8d%n&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;">);  </span><span style="color:#768390;">//Tab键的效果是：       7  </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//.使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;整数分组的效果是：%,d%n&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">9989997</span><span style="color:#ADBAC7;">); </span><span style="color:#768390;">//整数分组的效果是：9,989,997 </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//空格和小数点后面个数  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;一本书的价格是：% 50.5f元%n&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">49.8</span><span style="color:#ADBAC7;">);  </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//一本书的价格是：                                          49.80000元</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) {  </span></span>
<span class="line"><span style="color:#24292E;">    String str</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//$使用  </span></span>
<span class="line"><span style="color:#24292E;">    str</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;格式参数$的使用：%1$d,%2$s&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">99</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//格式参数$的使用：99,abc                        </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//+使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;显示正负数的符号：%+d与%d%n&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">99</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">99</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//显示正负数的符号：+99与-99 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//补O使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;最牛的编号是：%03d%n&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//最牛的编号是：007  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//空格使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Tab键的效果是：% 8d%n&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//Tab键的效果是：       7  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//.使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;整数分组的效果是：%,d%n&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9989997</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//整数分组的效果是：9,989,997 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//空格和小数点后面个数  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;一本书的价格是：% 50.5f元%n&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">49.8</span><span style="color:#24292E;">);  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//一本书的价格是：                                          49.80000元</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_3、日期和时间字符串格式化" tabindex="-1">3、日期和时间字符串格式化 <a class="header-anchor" href="#_3、日期和时间字符串格式化" aria-label="Permalink to &quot;3、日期和时间字符串格式化&quot;">​</a></h3><table><thead><tr><th>转 换 符</th><th>说 明</th><th>示 例</th></tr></thead><tbody><tr><td>c</td><td>包括全部日期和时间信息</td><td>星期六 十月 27 14:21:20 CST 2007</td></tr><tr><td>F</td><td>“年-月-日”格式</td><td>2007-10-27</td></tr><tr><td>D</td><td>“月/日/年”格式</td><td>10/27/07</td></tr><tr><td>r</td><td>“HH:MM:SS PM”格式（12时制）</td><td>02:25:51 下午</td></tr><tr><td>T</td><td>“HH:MM:SS”格式（24时制）</td><td>14:28:16</td></tr><tr><td>R</td><td>“HH:MM”格式（24时制）</td><td>14:28</td></tr></tbody></table><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">String</span><span style="color:#ADBAC7;">[] args) {  </span></span>
<span class="line"><span style="color:#ADBAC7;">    Date</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">date</span><span style="color:#F47067;">=new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Date</span><span style="color:#ADBAC7;">();                                  </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//c的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;全部日期和时间信息：%tc%n&quot;</span><span style="color:#ADBAC7;">,date); </span><span style="color:#768390;">// 九月 10 10:43:36 CST 2012 </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//f的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;年-月-日格式：%tF%n&quot;</span><span style="color:#ADBAC7;">,date);  </span><span style="color:#768390;">// 年-月-日格式：2012-09-10  </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//d的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;月/日/年格式：%tD%n&quot;</span><span style="color:#ADBAC7;">,date);  </span><span style="color:#768390;">// 月/日/年格式：09/10/12</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//r的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;HH:MM:SS PM格式（12时制）：%tr%n&quot;</span><span style="color:#ADBAC7;">,date); </span><span style="color:#768390;">//10:43:36 上午 </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//t的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;HH:MM:SS格式（24时制）：%tT%n&quot;</span><span style="color:#ADBAC7;">,date); </span><span style="color:#768390;">//HH:MM:SS格式（24时制）：10:43:36 </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//R的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;HH:MM格式（24时制）：%tR&quot;</span><span style="color:#ADBAC7;">,date);  </span><span style="color:#768390;">//HH:MM格式（24时制）：10:43</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) {  </span></span>
<span class="line"><span style="color:#24292E;">    Date date</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">();                                  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//c的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;全部日期和时间信息：%tc%n&quot;</span><span style="color:#24292E;">,date); </span><span style="color:#6A737D;">// 九月 10 10:43:36 CST 2012 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//f的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;年-月-日格式：%tF%n&quot;</span><span style="color:#24292E;">,date);  </span><span style="color:#6A737D;">// 年-月-日格式：2012-09-10  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//d的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;月/日/年格式：%tD%n&quot;</span><span style="color:#24292E;">,date);  </span><span style="color:#6A737D;">// 月/日/年格式：09/10/12</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//r的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HH:MM:SS PM格式（12时制）：%tr%n&quot;</span><span style="color:#24292E;">,date); </span><span style="color:#6A737D;">//10:43:36 上午 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//t的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HH:MM:SS格式（24时制）：%tT%n&quot;</span><span style="color:#24292E;">,date); </span><span style="color:#6A737D;">//HH:MM:SS格式（24时制）：10:43:36 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//R的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HH:MM格式（24时制）：%tR&quot;</span><span style="color:#24292E;">,date);  </span><span style="color:#6A737D;">//HH:MM格式（24时制）：10:43</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><table><thead><tr><th>转 换 符</th><th>说 明</th><th>示 例</th></tr></thead><tbody><tr><td>H</td><td>2位数字24时制的小时（不足2位前面补0）</td><td>15</td></tr><tr><td>I</td><td>2位数字12时制的小时（不足2位前面补0）</td><td>03</td></tr><tr><td>k</td><td>2位数字24时制的小时（前面不补0）</td><td>15</td></tr><tr><td>l</td><td>2位数字12时制的小时（前面不补0）</td><td>3</td></tr><tr><td>M</td><td>2位数字的分钟（不足2位前面补0）</td><td>03</td></tr><tr><td>S</td><td>2位数字的秒（不足2位前面补0）</td><td>09</td></tr><tr><td>L</td><td>3位数字的毫秒（不足3位前面补0）</td><td>015</td></tr><tr><td>N</td><td>9位数字的毫秒数（不足9位前面补0）</td><td>562000000</td></tr><tr><td>p</td><td>小写字母的上午或下午标记</td><td>中：下午 英：pm</td></tr><tr><td>z</td><td>相对于GMT的RFC822时区的偏移量</td><td>+0800</td></tr><tr><td>Z</td><td>时区缩写字符串</td><td>CST</td></tr><tr><td>s</td><td>1970-1-1 00:00:00 到现在所经过的秒数</td><td>1193468128</td></tr><tr><td>Q</td><td>1970-1-1 00:00:00 到现在所经过的毫秒数</td><td>1193468128984</td></tr></tbody></table><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">String</span><span style="color:#ADBAC7;">[] args) {  </span></span>
<span class="line"><span style="color:#ADBAC7;">    Date</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">date</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Date</span><span style="color:#ADBAC7;">();  </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//H的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;2位数字24时制的小时（不足2位前面补0）:%tH%n&quot;</span><span style="color:#ADBAC7;">, date);  </span><span style="color:#768390;">//11  </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//I的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;2位数字12时制的小时（不足2位前面补0）:%tI%n&quot;</span><span style="color:#ADBAC7;">, date);  </span><span style="color:#768390;">//11</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//k的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;2位数字24时制的小时（前面不补0）:%tk%n&quot;</span><span style="color:#ADBAC7;">, date);  </span><span style="color:#768390;">//11  </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//l的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;2位数字12时制的小时（前面不补0）:%tl%n&quot;</span><span style="color:#ADBAC7;">, date);  </span><span style="color:#768390;">//11  </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//M的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;2位数字的分钟（不足2位前面补0）:%tM%n&quot;</span><span style="color:#ADBAC7;">, date);  </span><span style="color:#768390;">//03  </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//S的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;2位数字的秒（不足2位前面补0）:%tS%n&quot;</span><span style="color:#ADBAC7;">, date);  </span><span style="color:#768390;">//52  </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//L的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;3位数字的毫秒（不足3位前面补0）:%tL%n&quot;</span><span style="color:#ADBAC7;">, date);  </span><span style="color:#768390;">//773  </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//N的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;9位数字的毫秒数（不足9位前面补0）:%tN%n&quot;</span><span style="color:#ADBAC7;">, date);  </span><span style="color:#768390;">//773000000  </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//p的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">str</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> String.</span><span style="color:#DCBDFB;">format</span><span style="color:#ADBAC7;">(Locale.US, </span><span style="color:#96D0FF;">&quot;小写字母的上午或下午标记(英)：%tp&quot;</span><span style="color:#ADBAC7;">, date);   </span><span style="color:#768390;">//am </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(str);   </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;小写字母的上午或下午标记（中）：%tp%n&quot;</span><span style="color:#ADBAC7;">, date);   </span><span style="color:#768390;">//上午 </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//z的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;相对于GMT的RFC822时区的偏移量:%tz%n&quot;</span><span style="color:#ADBAC7;">, date);  </span><span style="color:#768390;">//+0800 </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//Z的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;时区缩写字符串:%tZ%n&quot;</span><span style="color:#ADBAC7;">, date);  </span><span style="color:#768390;">//CST  </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//s的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;1970-1-1 00:00:00 到现在所经过的秒数：%ts%n&quot;</span><span style="color:#ADBAC7;">, date);  </span><span style="color:#768390;">// 1347246232</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">//Q的使用  </span></span>
<span class="line"><span style="color:#ADBAC7;">    System.out.</span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;1970-1-1 00:00:00 到现在所经过的毫秒数：%tQ%n&quot;</span><span style="color:#ADBAC7;">, date); </span><span style="color:#768390;">// 1347246232773  </span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) {  </span></span>
<span class="line"><span style="color:#24292E;">    Date date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">();  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//H的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2位数字24时制的小时（不足2位前面补0）:%tH%n&quot;</span><span style="color:#24292E;">, date);  </span><span style="color:#6A737D;">//11  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//I的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2位数字12时制的小时（不足2位前面补0）:%tI%n&quot;</span><span style="color:#24292E;">, date);  </span><span style="color:#6A737D;">//11</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//k的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2位数字24时制的小时（前面不补0）:%tk%n&quot;</span><span style="color:#24292E;">, date);  </span><span style="color:#6A737D;">//11  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//l的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2位数字12时制的小时（前面不补0）:%tl%n&quot;</span><span style="color:#24292E;">, date);  </span><span style="color:#6A737D;">//11  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//M的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2位数字的分钟（不足2位前面补0）:%tM%n&quot;</span><span style="color:#24292E;">, date);  </span><span style="color:#6A737D;">//03  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//S的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2位数字的秒（不足2位前面补0）:%tS%n&quot;</span><span style="color:#24292E;">, date);  </span><span style="color:#6A737D;">//52  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//L的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;3位数字的毫秒（不足3位前面补0）:%tL%n&quot;</span><span style="color:#24292E;">, date);  </span><span style="color:#6A737D;">//773  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//N的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;9位数字的毫秒数（不足9位前面补0）:%tN%n&quot;</span><span style="color:#24292E;">, date);  </span><span style="color:#6A737D;">//773000000  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//p的使用  </span></span>
<span class="line"><span style="color:#24292E;">    String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(Locale.US, </span><span style="color:#032F62;">&quot;小写字母的上午或下午标记(英)：%tp&quot;</span><span style="color:#24292E;">, date);   </span><span style="color:#6A737D;">//am </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str);   </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;小写字母的上午或下午标记（中）：%tp%n&quot;</span><span style="color:#24292E;">, date);   </span><span style="color:#6A737D;">//上午 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//z的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;相对于GMT的RFC822时区的偏移量:%tz%n&quot;</span><span style="color:#24292E;">, date);  </span><span style="color:#6A737D;">//+0800 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//Z的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;时区缩写字符串:%tZ%n&quot;</span><span style="color:#24292E;">, date);  </span><span style="color:#6A737D;">//CST  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//s的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1970-1-1 00:00:00 到现在所经过的秒数：%ts%n&quot;</span><span style="color:#24292E;">, date);  </span><span style="color:#6A737D;">// 1347246232</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//Q的使用  </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1970-1-1 00:00:00 到现在所经过的毫秒数：%tQ%n&quot;</span><span style="color:#24292E;">, date); </span><span style="color:#6A737D;">// 1347246232773  </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="fastjson" tabindex="-1">fastjson <a class="header-anchor" href="#fastjson" aria-label="Permalink to &quot;fastjson&quot;">​</a></h2><p>  JSON.parseObject（String str）是将str转化为相应的JSONObject对象，其中str是“键值对”形式的json字符串，转化为JSONObject对象之后就可以使用其内置的方法，进行各种处理了。</p><h3 id="jsonobject" tabindex="-1">JSONObject <a class="header-anchor" href="#jsonobject" aria-label="Permalink to &quot;JSONObject&quot;">​</a></h3><ul><li>put(String key, Object value)方法，在JSONObject对象中设置键值对在，在进行设值得时候，key是唯一的，如果用相同的key不断设值得时候，保留后面的值。</li><li>Object get(String key) :根据key值获取JSONObject对象中对应的value值，获取到的值是Object类型，需要手动转化为需要的数据类型。</li><li>int size():获取JSONObject对象中键值对的数量。</li><li>boolean isEmpty()：判断该JSONObject对象是否为空。</li><li>containsKey(Object key)：判断是否有需要的key值。</li><li>boolean containsValue(Object value)：判断是否有需要的value值。</li><li>JSONObject getJSONObject(String key)：如果JSONObjct对象中的value是一个JSONObject对象，即根据key获取对应的JSONObject对象。</li><li>JSONArray getJSONArray(String key) ：如果JSONObject对象中的value是一个JSONObject数组，既根据key获取对应的JSONObject数组。</li><li>Object remove(Object key)：根据key清除某一个键值对。由于JSONObject是一个map，它还具有map特有的两个方法。</li><li>Set&lt;String&gt; keySet() ：获取JSONObject中的key，并将其放入Set集合中。</li><li>Set&lt;Map.Entry&lt;String, Object&gt;&gt; entrySet()：在循环遍历时使用，取得是键和值的映射关系，Entry就是Map接口中的内部接口与String字符串转换。</li><li>toJSONString() /toString():将JSONObject对象转换为json的字符串。</li></ul>`,76);function h(s,b,m,S,f,O){const p=e,t=c("ClientOnly");return l(),y("div",null,[q,i(t,null,{default:d(()=>{var a,n;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=s.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(l(),u(p,{key:0,article:s.$frontmatter},null,8,["article"])):C("",!0)]}),_:1}),E])}const J=r(F,[["render",h]]);export{g as __pageData,J as default};
