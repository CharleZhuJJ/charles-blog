import{_ as t}from"./chunks/ArticleMetadata.8b6b367a.js";import{_ as p,H as c,o as a,c as r,J as d,E as k,C as l,a as u,V as h,D as y,G as C}from"./chunks/framework.981adca9.js";const A="/charles-blog/assets/SessionAuth.5013809a.png",m="/charles-blog/assets/TokenAuth.e0811ee1.png",x=JSON.parse('{"title":"会话技术","description":"","frontmatter":{"title":"会话技术","author":"Charles Chu","date":"2023/07/15","isOriginal":true},"headers":[],"relativePath":"md/network/ConversationTechnolog.md","filePath":"md/network/ConversationTechnolog.md","lastUpdated":1691825438000}'),D={name:"md/network/ConversationTechnolog.md"},g=l("h1",{id:"会话技术",tabindex:"-1"},[u("会话技术 "),l("a",{class:"header-anchor",href:"#会话技术","aria-label":'Permalink to "会话技术"'},"​")],-1),b=h(`<ol><li>会话：一次会话中包含多次请求和响应。 <ul><li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</li></ul></li><li>功能：在一次会话的范围内的多次请求间，共享数据</li><li>方式： <ol><li>客户端会话技术：Cookie</li><li>服务器端会话技术：Session</li></ol></li></ol><h2 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;Cookie&quot;">​</a></h2><p>  客户端会话技术，将数据保存到客户端</p><h3 id="cookie使用步骤" tabindex="-1">Cookie使用步骤 <a class="header-anchor" href="#cookie使用步骤" aria-label="Permalink to &quot;Cookie使用步骤&quot;">​</a></h3><ol><li>创建Cookie对象，绑定数据：new Cookie(String name, String value)</li><li>发送Cookie对象：response.addCookie(Cookie cookie)</li><li>获取Cookie，拿到数据：Cookie[] request.getCookies()</li></ol><h3 id="cookie的特点" tabindex="-1">Cookie的特点 <a class="header-anchor" href="#cookie的特点" aria-label="Permalink to &quot;Cookie的特点&quot;">​</a></h3><ol><li>cookie存储数据在客户端浏览器</li><li>浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)</li></ol><h3 id="cookie作用" tabindex="-1">Cookie作用 <a class="header-anchor" href="#cookie作用" aria-label="Permalink to &quot;Cookie作用&quot;">​</a></h3><ol><li>cookie一般用于存出少量的不太敏感的数据</li><li>在不登录的情况下，完成服务器对客户端的身份识别</li></ol><h3 id="cookie的细节" tabindex="-1">Cookie的细节 <a class="header-anchor" href="#cookie的细节" aria-label="Permalink to &quot;Cookie的细节&quot;">​</a></h3><ol><li>一次可不可以发送多个cookie? <ul><li>可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。</li></ul></li><li>cookie在浏览器中保存多长时间？ <ul><li>默认情况下，当浏览器关闭后，Cookie数据被销毁</li></ul></li><li>持久化存储 <ul><li>setMaxAge(int seconds) <ul><li>正数：将Cookie数据写到硬盘的文件中。持久化存储。指定cookie存活时间，时间到后，cookie文件自动失效（时间单位：秒）</li><li>负数：默认值</li><li>零：删除cookie信息</li></ul></li></ul></li><li>cookie能不能存中文？ <ul><li>在tomcat 8 之前 cookie中不能直接存储中文数据，需要将中文数据转码---一般采用URL编码(%E3)</li><li>在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析</li></ul></li><li>cookie共享问题？ <ul><li>假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？ <ul><li>默认情况下cookie不能共享</li><li>setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录，如果要共享，则可以将path设置为&quot;/&quot;</li></ul></li><li>不同的tomcat服务器间cookie共享问题？ <ul><li>setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享</li><li>setDomain(&quot;.baidu.com&quot;),那么tieba.baidu.com和news.baidu.com中cookie可以共享</li></ul></li></ul></li></ol><h2 id="session" tabindex="-1">Session <a class="header-anchor" href="#session" aria-label="Permalink to &quot;Session&quot;">​</a></h2><p>  服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中（HttpSession），Session的实现是依赖于Cookie的。</p><h3 id="session的使用步骤" tabindex="-1">Session的使用步骤 <a class="header-anchor" href="#session的使用步骤" aria-label="Permalink to &quot;Session的使用步骤&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 1. 获取HttpSession对象：</span></span>
<span class="line"><span style="color:#ADBAC7;">HttpSession</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">session</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> request.</span><span style="color:#DCBDFB;">getSession</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 2. 使用HttpSession对象：</span></span>
<span class="line"><span style="color:#ADBAC7;">Object </span><span style="color:#DCBDFB;">getAttribute</span><span style="color:#ADBAC7;">(String name)  </span></span>
<span class="line"><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">setAttribute</span><span style="color:#ADBAC7;">(String name, Object value)</span></span>
<span class="line"><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">removeAttribute</span><span style="color:#ADBAC7;">(String name)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1. 获取HttpSession对象：</span></span>
<span class="line"><span style="color:#24292E;">HttpSession session </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getSession</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 使用HttpSession对象：</span></span>
<span class="line"><span style="color:#24292E;">Object </span><span style="color:#6F42C1;">getAttribute</span><span style="color:#24292E;">(String name)  </span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(String name, Object value)</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeAttribute</span><span style="color:#24292E;">(String name)</span></span></code></pre></div><h3 id="session的特点" tabindex="-1">Session的特点 <a class="header-anchor" href="#session的特点" aria-label="Permalink to &quot;Session的特点&quot;">​</a></h3><ol><li>session用于存储一次会话的多次请求的数据，存在服务器端</li><li>session可以存储任意类型，任意大小的数据</li></ol><h3 id="session与cookie的区别" tabindex="-1">Session与Cookie的区别 <a class="header-anchor" href="#session与cookie的区别" aria-label="Permalink to &quot;Session与Cookie的区别&quot;">​</a></h3><ol><li>session存储数据在服务器端，Cookie在客户端</li><li>session没有数据大小限制，Cookie有</li><li>session数据安全，Cookie相对于不安全</li></ol><h3 id="session的细节" tabindex="-1">Session的细节 <a class="header-anchor" href="#session的细节" aria-label="Permalink to &quot;Session的细节&quot;">​</a></h3><ol><li>当客户端关闭后，服务器不关闭，两次获取session是否为同一个？ <ul><li>默认情况下。不是。</li><li>如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。</li></ul></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">Cookie</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">c</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Cookie</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;JSESSIONID&quot;</span><span style="color:#ADBAC7;">,session.</span><span style="color:#DCBDFB;">getId</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">c.</span><span style="color:#DCBDFB;">setMaxAge</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">60</span><span style="color:#F47067;">*</span><span style="color:#6CB6FF;">60</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">response.</span><span style="color:#DCBDFB;">addCookie</span><span style="color:#ADBAC7;">(c);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Cookie c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cookie</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;JSESSIONID&quot;</span><span style="color:#24292E;">,session.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">c.</span><span style="color:#6F42C1;">setMaxAge</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">60</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">60</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">response.</span><span style="color:#6F42C1;">addCookie</span><span style="color:#24292E;">(c);</span></span></code></pre></div><ol start="2"><li><p>客户端不关闭，服务器关闭后，两次获取的session是同一个吗？</p><ul><li>不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作 <ul><li>session的钝化：在服务器正常关闭之前，将session对象系列化到硬盘上</li><li>session的活化：在服务器启动后，将session文件转化为内存中的session对象即可。</li></ul></li></ul></li><li><p>session什么时候被销毁？</p><ul><li>服务器关闭</li><li>session对象调用invalidate() 。</li><li>session默认失效时间 30分钟</li></ul></li></ol><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">session-config</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">session-timeout</span><span style="color:#ADBAC7;">&gt;30&lt;/</span><span style="color:#8DDB8C;">session-timeout</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">session-config</span><span style="color:#ADBAC7;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">session-config</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">session-timeout</span><span style="color:#24292E;">&gt;30&lt;/</span><span style="color:#22863A;">session-timeout</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">session-config</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="session的状态保持" tabindex="-1">Session的状态保持 <a class="header-anchor" href="#session的状态保持" aria-label="Permalink to &quot;Session的状态保持&quot;">​</a></h3><p>  当用户第一次通过浏览器使用用户名和密码访问服务器时，服务器会验证用户数据，验证成功后在服务器端写入session数据，向客户端浏览器返回sessionid。</p><p>  浏览器将sessionid保存在cookie中，当用户再次访问服务器时，会携带sessionid，服务器会拿着sessionid从服务器获取session数据，然后进行用户信息查询，查询到，就会将查询到的用户信息返回，从而实现状态保持。 <img src="`+A+'" alt="SessionAuth"></p><h4 id="弊端" tabindex="-1">弊端 <a class="header-anchor" href="#弊端" aria-label="Permalink to &quot;弊端&quot;">​</a></h4><ol><li>服务器压力增大 <ul><li>通常session是存储在内存中的，每个用户通过认证之后都会将session数据保存在服务器的内存中，而当用户量增大时，服务器的压力增大。</li></ul></li><li>CSRF跨站伪造请求攻击 <ul><li>session是基于cookie进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。</li></ul></li><li>扩展性不强 <ul><li>如果将来搭建了多个服务器，虽然每个服务器都执行的是同样的业务逻辑，但是session数据是保存在内存中的（不是共享的），用户第一次访问的是服务器1，当用户再次请求时可能访问的是另外一台服务器2，服务器2获取不到session信息，就判定用户没有登陆过。</li></ul></li></ol><h2 id="token认证机制" tabindex="-1">Token认证机制 <a class="header-anchor" href="#token认证机制" aria-label="Permalink to &quot;Token认证机制&quot;">​</a></h2><p>  token与session的不同主要在认证成功后，会对当前用户数据进行加密，生成一个加密字符串token，返还给客户端（服务器端并不进行保存）</p><p>  浏览器会将接收到的token值存储在Local Storage中，（通过js代码写入Local Storage，通过js获取，并不会像cookie一样自动携带）</p><p>  再次访问时服务器端对token值的处理：服务器对浏览器传来的token值进行解密，解密完成后进行用户数据的查询，如果查询成功，则通过认证，实现状态保持，所以，即时有了多台服务器，服务器也只是做了token的解密和用户数据的查询，它不需要在服务端去保留用户的认证信息或者会话信息，这就意味着基于token认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利，解决了session扩展性的弊端。 <img src="'+m+'" alt="TokenAuth"></p><h2 id="session-cookie-token" tabindex="-1">Session,Cookie,Token <a class="header-anchor" href="#session-cookie-token" aria-label="Permalink to &quot;Session,Cookie,Token&quot;">​</a></h2><ul><li>session存储于服务器，可以理解为一个状态列表，拥有一个唯一识别符号sessionId，通常存放于cookie中。服务器收到cookie后解析出sessionId，再去session列表中查找，才能找到相应session。依赖cookie</li><li>cookie类似一个令牌，装有sessionId，存储在客户端，浏览器通常会自动添加。</li><li>token也类似一个令牌，无状态，用户信息都被加密到token中，服务器收到token后解密就可知道是哪个用户。需要开发者手动添加。</li></ul>',35);function B(s,S,q,v,_,E){const n=t,i=c("ClientOnly");return a(),r("div",null,[g,d(i,null,{default:k(()=>{var o,e;return[(((o=s.$frontmatter)==null?void 0:o.aside)??!0)&&(((e=s.$frontmatter)==null?void 0:e.showArticleMetadata)??!0)?(a(),y(n,{key:0,article:s.$frontmatter},null,8,["article"])):C("",!0)]}),_:1}),b])}const P=p(D,[["render",B]]);export{x as __pageData,P as default};
