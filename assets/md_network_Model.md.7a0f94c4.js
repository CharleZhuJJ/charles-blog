import{_ as n}from"./chunks/ArticleMetadata.8b6b367a.js";import{_ as s,H as p,o as r,c as h,J as d,E as c,C as o,a as u,V as P,D as m,G as _}from"./chunks/framework.981adca9.js";const b="/charles-blog/assets/Osi.1f645269.png",f="/charles-blog/assets/Messaging.5d2cc654.png",w=JSON.parse('{"title":"网络模型","description":"","frontmatter":{"title":"网络模型","author":"Charles Chu","date":"2022/09/28","isOriginal":true},"headers":[],"relativePath":"md/network/Model.md","filePath":"md/network/Model.md","lastUpdated":1691825438000}'),q={name:"md/network/Model.md"},k=o("h1",{id:"网络模型",tabindex:"-1"},[u("网络模型 "),o("a",{class:"header-anchor",href:"#网络模型","aria-label":'Permalink to "网络模型"'},"​")],-1),x=P('<h2 id="osi七层模型" tabindex="-1">OSI七层模型 <a class="header-anchor" href="#osi七层模型" aria-label="Permalink to &quot;OSI七层模型&quot;">​</a></h2><p>  该模型注重通信协议必要的功能</p><p><img src="'+b+'" alt="Osi"></p><h3 id="物理层" tabindex="-1">物理层 <a class="header-anchor" href="#物理层" aria-label="Permalink to &quot;物理层&quot;">​</a></h3><p>  首先解决两台物理机之间的通信需求，具体就是机器A往机器B发送比特流，机器B能收到比特流。</p><p>  物理层主要定义了物理设备的标准，如网线的类型，光纤的接口类型，各种传输介质的传输速率。</p><p>  主要作用是传输比特流（0101二进制数据），将比特流转化为电流强弱传输，到达目的后再转化为比特流，即常说的数模转化和模数转换。这层数据叫做比特。网卡工作在这层。</p><p>  物理层是OSI七层模型的物理基础，没有它就谈不上数据传输了</p><p>  物理层就是由实物所承载的，所以作比喻的话，公路、汽车和飞机等承载货物（数据）的交通工具，就是物理层的象征</p><h3 id="数据链路层" tabindex="-1">数据链路层 <a class="header-anchor" href="#数据链路层" aria-label="Permalink to &quot;数据链路层&quot;">​</a></h3><p>  在传输比特流的过程中，会产生错传、数据传输不完整的可能。</p><p>  数据链路层定义了如何格式化数据进行传输，以及如何控制对物理介质的访问。通常提供错误检测和纠正，以确保数据传输的准确性。</p><p>  本层将比特数据组成帧，交换机工作在这层，对帧解码，并根据帧中包含的信息把数据发送到正确的接收方。</p><p>  该层负责物理层面上互连的节点之间的通信传输。例如与1个以太网相连的两个节点间的通讯。常见的协议有 HDLC、PPP、SLIP等</p><p>  数据链路层会将0、1序列划分为具有意义的数据帧传送给对端（数据帧的生成与接收）</p><h3 id="网络层" tabindex="-1">网络层 <a class="header-anchor" href="#网络层" aria-label="Permalink to &quot;网络层&quot;">​</a></h3><p>  随着网络节点的不断增加，点对点通讯需要通过多个节点，如何找到目标节点，如何选择最佳路径成为首要需求。</p><p>  网络层主要功能是将网络地址转化为对应的物理地址，并决定如何将数据从发送方路由到接收方。</p><p>  网络层通过综合考虑发送优先权、网络拥塞程度、服务质量以及可选路由的花费来决定从一个网络中节点A到另一个网络中节点B的最佳路径。</p><p>  由于网络层处理并智能指导数据传送，路由器连接网络隔断，所以路由器属于网络层。</p><p>  此层的数据称之为数据包。本层需要关注的协议TCP/IP协议中的IP协议。</p><p>  网络层负责将数据传输到目标地址。目标地址可以使多个网络通过路由器连接而成的某一个地址。因此这一层主要负责寻址和路由选择。主要由 IP、ICMP 两个协议组成。</p><p>  网络层将数据从发送端的主机发送到接收端的主机，两台主机间可能会存在很多数据链路，但网络层就是负责找出一条相对顺畅的通路将数据传递过去。传输的地址使用的是IP地址。IP地址通过不断转发到更近的IP地址，最终可以到达目标地址</p><h3 id="传输层" tabindex="-1">传输层 <a class="header-anchor" href="#传输层" aria-label="Permalink to &quot;传输层&quot;">​</a></h3><p>  随着网络通信需求的进一步扩大，通信过程中需要发送大量的数据，如海量文件传输，可能需要很长时间，网络在通信的过程中会中断很多次，此时为了保证传输大量文件时的准确性，需要对发送出去的数据进行切分，切割为一个一个的段落（Segement）发送，其中一个段落丢失是否重传，段落是否按顺序到达，是传输层需要考虑的问题。</p><p>  传输层解决了主机间的数据传输，数据间的传输可以是不同网络，并且传输层解决了传输质量的问题。</p><p>  传输层需要关注的协议有TCP/IP协议中的TCP协议和UDP协议。</p><h3 id="会话层" tabindex="-1">会话层 <a class="header-anchor" href="#会话层" aria-label="Permalink to &quot;会话层&quot;">​</a></h3><p>  自动收发包，自动寻址。</p><p>  会话层作用是负责建立和断开通信连接，何时建立，断开连接以及保持多久的连接。常见的协议有 ADSP、RPC 等</p><h3 id="表示层" tabindex="-1">表示层 <a class="header-anchor" href="#表示层" aria-label="Permalink to &quot;表示层&quot;">​</a></h3><p>  Linux给WIndows发包，不同系统语法不一致，如exe不能在Linux下执行，shell不能在Windows不能直接运行。于是需要表示层。</p><p>  解决不同系统之间通信语法问题，在表示层数据将按照网络能理解的方案进行格式化，格式化因所使用网络的不同而不同。</p><p>  它主要负责数据格式的转换。具体来说，就是讲设备固有的数据格式转换为网络标准格式。常见的协议有ASCII、SSL/TLS 等</p><h3 id="应用层" tabindex="-1">应用层 <a class="header-anchor" href="#应用层" aria-label="Permalink to &quot;应用层&quot;">​</a></h3><p>  规定发送方和接收方必须使用一个固定长度的消息头，消息头必须使用某种固定的组成，消息头中必须记录消息体的长度等信息，方便接收方正确解析发送方发送的数据。</p><p>  应用层旨在更方便应用从网络中接收的数据，重点关注TCP/IP协议中的HTTP协议</p><h3 id="各层的数据名称" tabindex="-1">各层的数据名称 <a class="header-anchor" href="#各层的数据名称" aria-label="Permalink to &quot;各层的数据名称&quot;">​</a></h3><ul><li>四层传输层数据被称作「段」（Segments）；</li><li>三层网络层数据被称做「包」（Packages）；</li><li>二层数据链路层时数据被称为「帧」（Frames）；</li><li>一层物理层时数据被称为「比特流」（Bits）。</li></ul><h2 id="四层模型-tcp和ip模型" tabindex="-1">四层模型（TCP和IP模型） <a class="header-anchor" href="#四层模型-tcp和ip模型" aria-label="Permalink to &quot;四层模型（TCP和IP模型）&quot;">​</a></h2><p>  该模型强调在计算机上实现协议应该开发哪种程序</p><h3 id="应用层-1" tabindex="-1">应用层 <a class="header-anchor" href="#应用层-1" aria-label="Permalink to &quot;应用层&quot;">​</a></h3><p>  主要有负责web浏览器的HTTP协议， 文件传输的FTP协议，负责电子邮件的SMTP协议，负责域名系统的DNS等</p><h3 id="传输层-1" tabindex="-1">传输层 <a class="header-anchor" href="#传输层-1" aria-label="Permalink to &quot;传输层&quot;">​</a></h3><p>  主要是有可靠传输的TCP协议，特别高效的UDP协议。主要负责传输应用层的数据包。</p><h3 id="网络层-1" tabindex="-1">网络层 <a class="header-anchor" href="#网络层-1" aria-label="Permalink to &quot;网络层&quot;">​</a></h3><p>  主要是IP协议。主要负责寻址（找到目标设备的位置）</p><h3 id="数据链路层-1" tabindex="-1">数据链路层 <a class="header-anchor" href="#数据链路层-1" aria-label="Permalink to &quot;数据链路层&quot;">​</a></h3><p>  主要是负责转换数字信号和物理二进制信号。</p><h3 id="四层网络协议的作用" tabindex="-1">四层网络协议的作用 <a class="header-anchor" href="#四层网络协议的作用" aria-label="Permalink to &quot;四层网络协议的作用&quot;">​</a></h3><ul><li>发送端是由上至下，把上层来的数据在头部加上各层协议的数据（部首）再下发给下层。</li><li>接受端则由下而上，把从下层接受到的数据进行解密和去掉头部的部首后再发送给上层。</li><li>层层加密和解密后，应用层最终拿到了需要的数据。</li></ul><p><img src="'+f+'" alt="Messaging"></p>',52);function C(a,I,T,S,g,M){const l=n,i=p("ClientOnly");return r(),h("div",null,[k,d(i,null,{default:c(()=>{var e,t;return[(((e=a.$frontmatter)==null?void 0:e.aside)??!0)&&(((t=a.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(r(),m(l,{key:0,article:a.$frontmatter},null,8,["article"])):_("",!0)]}),_:1}),x])}const B=s(q,[["render",C]]);export{w as __pageData,B as default};
