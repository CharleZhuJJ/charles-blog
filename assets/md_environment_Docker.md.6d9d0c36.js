import{_ as c}from"./chunks/ArticleMetadata.8b6b367a.js";import{_ as t,H as r,o as l,c as y,J as i,E as F,C as p,a as D,V as d,D as A,G as C}from"./chunks/framework.981adca9.js";const k="/charles-blog/assets/Contrast.6d604e03.png",B="/charles-blog/assets/Architecture.083f81a8.png",E="/charles-blog/assets/Cmd.baffd664.png",u="/charles-blog/assets/Volume.ba21aee0.png",h="/charles-blog/assets/PortMapping.9b890974.png",m="/charles-blog/assets/Image.5f8621a0.png",T=JSON.parse('{"title":"Docker","description":"","frontmatter":{"title":"Docker","author":"Charles Chu","date":"2022/02/20","isOriginal":true},"headers":[],"relativePath":"md/environment/Docker.md","filePath":"md/environment/Docker.md","lastUpdated":1691825438000}'),b={name:"md/environment/Docker.md"},g=p("h1",{id:"docker",tabindex:"-1"},[D("Docker "),p("a",{class:"header-anchor",href:"#docker","aria-label":'Permalink to "Docker"'},"​")],-1),v=d('<p>  Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上；容器是完全使用沙箱机制，相互隔离；容器性能开销极低。</p><p>  容器就是将软件打包成标准化单元，以用于开发、交付和部署。</p><ul><li>容器镜像是轻量的、可执行的独立软件包 ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。</li><li>容器化软件在任何环境中都能够始终如一地运行。</li><li>容器赋予了软件独立性，使其免受外在环境差异的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突。</li></ul><h2 id="docker容器虚拟化与传统虚拟机比较" tabindex="-1">Docker容器虚拟化与传统虚拟机比较 <a class="header-anchor" href="#docker容器虚拟化与传统虚拟机比较" aria-label="Permalink to &quot;Docker容器虚拟化与传统虚拟机比较&quot;">​</a></h2><ul><li>相同 <ul><li>容器和虚拟机具有相似的资源隔离和分配优势</li></ul></li><li>不同 <ul><li>容器虚拟化的是操作系统，虚拟机虚拟化的是硬件。</li><li>传统虚拟机可以运行不同的操作系统，容器只能运行同一类型操作系统 <img src="'+k+'" alt="Contrast"></li></ul></li></ul><h2 id="docker-架构" tabindex="-1">Docker 架构 <a class="header-anchor" href="#docker-架构" aria-label="Permalink to &quot;Docker 架构&quot;">​</a></h2><ul><li>镜像（Image）：Docker 镜像，就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li><li>容器（Container）：镜像和容器的关系，就像是面向对象程序设计中的类和对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li>仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像。 <img src="'+B+'" alt="architecture"></li></ul><h2 id="docker的常用命令" tabindex="-1">Docker的常用命令 <a class="header-anchor" href="#docker的常用命令" aria-label="Permalink to &quot;Docker的常用命令&quot;">​</a></h2><p><img src="'+E+`" alt="cmd"></p><h3 id="docker进程相关命令" tabindex="-1">Docker进程相关命令 <a class="header-anchor" href="#docker进程相关命令" aria-label="Permalink to &quot;Docker进程相关命令&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 启动docker服务:</span></span>
<span class="line"><span style="color:#F69D50;">systemctl</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">start</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">docker</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#停止docker服务:</span></span>
<span class="line"><span style="color:#F69D50;">systemctl</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">stop</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">docker</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#重启docker服务:</span></span>
<span class="line"><span style="color:#F69D50;">systemctl</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">restart</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">docker</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span></span>
<span class="line"><span style="color:#768390;">#查看docker服务状态:</span></span>
<span class="line"><span style="color:#F69D50;">systemctl</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">status</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">docker</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span></span>
<span class="line"><span style="color:#768390;">#设置开机启动docker服务:</span></span>
<span class="line"><span style="color:#F69D50;">systemctl</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">enable</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">docker</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 启动docker服务:</span></span>
<span class="line"><span style="color:#6F42C1;">systemctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#停止docker服务:</span></span>
<span class="line"><span style="color:#6F42C1;">systemctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#重启docker服务:</span></span>
<span class="line"><span style="color:#6F42C1;">systemctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">restart</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#6A737D;">#查看docker服务状态:</span></span>
<span class="line"><span style="color:#6F42C1;">systemctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">status</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#6A737D;">#设置开机启动docker服务:</span></span>
<span class="line"><span style="color:#6F42C1;">systemctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">enable</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span></span></code></pre></div><h3 id="docker镜像相关命令" tabindex="-1">Docker镜像相关命令 <a class="header-anchor" href="#docker镜像相关命令" aria-label="Permalink to &quot;Docker镜像相关命令&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">#查看镜像: 查看本地所有的镜像</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">images</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">images</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">–q</span><span style="color:#ADBAC7;"> </span><span style="color:#768390;"># 查看所用镜像的id</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#搜索镜像:从网络中查找需要的镜像</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">search</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">镜像名称</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#拉取镜像:从Docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是最新的版本。</span></span>
<span class="line"><span style="color:#768390;">#如果不知道镜像版本，可以去docker hub 搜索对应镜像查看。</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">pull</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">镜像名称</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#删除镜像: 删除本地镜像</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">rmi</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">镜像id</span><span style="color:#ADBAC7;"> </span><span style="color:#768390;"># 删除指定本地镜像</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">rmi</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">\`</span><span style="color:#F69D50;">docker</span><span style="color:#96D0FF;"> images </span><span style="color:#6CB6FF;">-q</span><span style="color:#96D0FF;">\`</span><span style="color:#ADBAC7;">  </span><span style="color:#768390;"># 删除所有本地镜像</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#查看镜像: 查看本地所有的镜像</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">images</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">images</span><span style="color:#24292E;"> </span><span style="color:#032F62;">–q</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 查看所用镜像的id</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#搜索镜像:从网络中查找需要的镜像</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">search</span><span style="color:#24292E;"> </span><span style="color:#032F62;">镜像名称</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#拉取镜像:从Docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是最新的版本。</span></span>
<span class="line"><span style="color:#6A737D;">#如果不知道镜像版本，可以去docker hub 搜索对应镜像查看。</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">镜像名称</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#删除镜像: 删除本地镜像</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rmi</span><span style="color:#24292E;"> </span><span style="color:#032F62;">镜像id</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 删除指定本地镜像</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rmi</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">docker</span><span style="color:#032F62;"> images </span><span style="color:#005CC5;">-q</span><span style="color:#032F62;">\`</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 删除所有本地镜像</span></span></code></pre></div><h3 id="docker容器相关命令" tabindex="-1">Docker容器相关命令 <a class="header-anchor" href="#docker容器相关命令" aria-label="Permalink to &quot;Docker容器相关命令&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">#查看容器</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">ps</span><span style="color:#ADBAC7;"> </span><span style="color:#768390;"># 查看正在运行的容器</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">ps</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">–a</span><span style="color:#ADBAC7;"> </span><span style="color:#768390;"># 查看所有容器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#创建并启动容器</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">run</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">参数</span></span>
<span class="line"><span style="color:#768390;"># 参数说明：</span></span>
<span class="line"><span style="color:#ADBAC7;">     </span><span style="color:#F69D50;">-i：保持容器运行。通常与</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-t</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">同时使用。加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。</span></span>
<span class="line"><span style="color:#ADBAC7;">     </span><span style="color:#F69D50;">-t：为容器重新分配一个伪输入终端，通常与</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-i</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">同时使用。</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">-d：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">exec</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">进入容器。退出后，容器不会关闭。</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">-it</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">创建的容器一般称为交互式容器。</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">-id</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">创建的容器一般称为守护式容器。</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">--name：为创建的容器命名。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#进入容器</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">exec</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">参数</span><span style="color:#ADBAC7;"> </span><span style="color:#768390;"># 退出容器，容器不会关闭</span></span>
<span class="line"><span style="color:#768390;">#参数说明：</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">-d</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">:分离模式:</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">在后台运行</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">-i</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">:即使没有附加也保持STDIN</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">打开</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">-t</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">:分配一个伪终端</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">例子：</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">exec</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-it</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">nginx</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">/bin/sh</span><span style="color:#ADBAC7;"> </span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">exec</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-it</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">9</span><span style="color:#96D0FF;">df70f9a0714</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#停止容器</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">stop</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">容器名称</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#启动容器</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">start</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">容器名称</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#删除容器：如果容器是运行状态则删除失败，需要停止容器才能删除</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">rm</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">容器名称</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#查看容器信息</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">inspect</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">容器名称</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#查看容器</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ps</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 查看正在运行的容器</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ps</span><span style="color:#24292E;"> </span><span style="color:#032F62;">–a</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 查看所有容器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#创建并启动容器</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">参数</span></span>
<span class="line"><span style="color:#6A737D;"># 参数说明：</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">-i：保持容器运行。通常与</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">同时使用。加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">-t：为容器重新分配一个伪输入终端，通常与</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">同时使用。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-d：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#032F62;">进入容器。退出后，容器不会关闭。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">创建的容器一般称为交互式容器。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-id</span><span style="color:#24292E;"> </span><span style="color:#032F62;">创建的容器一般称为守护式容器。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">--name：为创建的容器命名。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#进入容器</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#032F62;">参数</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 退出容器，容器不会关闭</span></span>
<span class="line"><span style="color:#6A737D;">#参数说明：</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:分离模式:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">在后台运行</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:即使没有附加也保持STDIN</span><span style="color:#24292E;"> </span><span style="color:#032F62;">打开</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:分配一个伪终端</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">例子：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/bin/sh</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9</span><span style="color:#032F62;">df70f9a0714</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#停止容器</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器名称</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#启动容器</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器名称</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#删除容器：如果容器是运行状态则删除失败，需要停止容器才能删除</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器名称</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#查看容器信息</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">inspect</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器名称</span></span></code></pre></div><h2 id="数据卷" tabindex="-1">数据卷 <a class="header-anchor" href="#数据卷" aria-label="Permalink to &quot;数据卷&quot;">​</a></h2><p>  数据卷是宿主机中的一个目录或文件</p><p>  当容器目录和数据卷目录绑定后，对方的修改会立即同步</p><p>  一个数据卷可以被多个容器同时挂载；一个容器也可以被挂载多个数据卷</p><h3 id="数据卷作用" tabindex="-1">数据卷作用 <a class="header-anchor" href="#数据卷作用" aria-label="Permalink to &quot;数据卷作用&quot;">​</a></h3><ul><li>容器数据持久化</li><li>外部机器和容器间接通信</li><li>容器之间数据交换</li></ul><h3 id="数据卷容器" tabindex="-1">数据卷容器 <a class="header-anchor" href="#数据卷容器" aria-label="Permalink to &quot;数据卷容器&quot;">​</a></h3><ul><li>创建一个容器，挂载一个目录，让其他容器继承自该容器( --volume-from )。</li><li>通过简单方式实现数据卷配置 <img src="`+u+`" alt="volume"></li></ul><h3 id="设置数据卷和数据卷容器" tabindex="-1">设置数据卷和数据卷容器 <a class="header-anchor" href="#设置数据卷和数据卷容器" aria-label="Permalink to &quot;设置数据卷和数据卷容器&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">#设置数据卷</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">run</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">...</span><span style="color:#ADBAC7;">  </span><span style="color:#96D0FF;">–v</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">宿主机目录</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">文件</span><span style="color:#ADBAC7;">)</span><span style="color:#96D0FF;">:容器内目录</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">文件</span><span style="color:#ADBAC7;">)  </span><span style="color:#96D0FF;">...</span></span>
<span class="line"><span style="color:#768390;">#注意事项：</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">1.</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">目录必须是绝对路径</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">2.</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">如果目录不存在，会自动创建</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">3.</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">可以挂载多个数据卷</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#768390;"># 配置数据卷容器</span></span>
<span class="line"><span style="color:#768390;"># 1.创建启动c3数据卷容器，使用 –v 参数 设置数据卷</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">run</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">–it</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--name=c3</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">–v</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">/volume</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">centos:7</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">/bin/bash</span></span>
<span class="line"><span style="color:#768390;">#2.创建启动 c1 c2 容器，使用 –-volumes-from 参数 设置数据卷</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">run</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">–it</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--name=c1</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--volumes-from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">c3</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">centos:7</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">/bin/bash</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">run</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">–it</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--name=c2</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--volumes-from</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">c3</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">centos:7</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">/bin/bash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#设置数据卷</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span><span style="color:#24292E;">  </span><span style="color:#032F62;">–v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">宿主机目录</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">文件</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:容器内目录</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">文件</span><span style="color:#24292E;">)  </span><span style="color:#032F62;">...</span></span>
<span class="line"><span style="color:#6A737D;">#注意事项：</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">1.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">目录必须是绝对路径</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">2.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果目录不存在，会自动创建</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">3.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">可以挂载多个数据卷</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#6A737D;"># 配置数据卷容器</span></span>
<span class="line"><span style="color:#6A737D;"># 1.创建启动c3数据卷容器，使用 –v 参数 设置数据卷</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">–it</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name=c3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">–v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">centos:7</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/bin/bash</span></span>
<span class="line"><span style="color:#6A737D;">#2.创建启动 c1 c2 容器，使用 –-volumes-from 参数 设置数据卷</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">–it</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name=c1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--volumes-from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">c3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">centos:7</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/bin/bash</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">–it</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name=c2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--volumes-from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">c3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">centos:7</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/bin/bash</span></span></code></pre></div><h2 id="端口映射" tabindex="-1">端口映射 <a class="header-anchor" href="#端口映射" aria-label="Permalink to &quot;端口映射&quot;">​</a></h2><p>  容器内的网络服务和外部机器不能直接通信；外部机器和宿主机可以直接通信；宿主机和容器可以直接通信</p><p>  当容器中的网络服务需要被外部机器访问时，可以将容器中提供服务的端口映射到宿主机的端口上。外部机器访问宿主机的该端口，从而间接访问容器的服务。 <img src="`+h+`" alt="PortMapping"></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 端口映射</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">run</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-id</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-p</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">3307</span><span style="color:#96D0FF;">:3306</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-e</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">MYSQL_ROOT_PASSWORD=</span><span style="color:#6CB6FF;">123456</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">mysql:5.6</span></span>
<span class="line"><span style="color:#768390;"># 参数解释：</span></span>
<span class="line"><span style="color:#F69D50;">-p</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">3307</span><span style="color:#96D0FF;">:3306：将容器的</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">3306</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">端口映射到宿主机的</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">3307</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">端口。</span></span>
<span class="line"><span style="color:#F69D50;">-e</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">MYSQL_ROOT_PASSWORD=</span><span style="color:#6CB6FF;">123456</span><span style="color:#96D0FF;">：初始化</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">root</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">用户的密码。</span><span style="color:#ADBAC7;"> </span><span style="color:#768390;"># -e 传递环境变量</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 端口映射</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-id</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3307</span><span style="color:#032F62;">:3306</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MYSQL_ROOT_PASSWORD=</span><span style="color:#005CC5;">123456</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysql:5.6</span></span>
<span class="line"><span style="color:#6A737D;"># 参数解释：</span></span>
<span class="line"><span style="color:#6F42C1;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3307</span><span style="color:#032F62;">:3306：将容器的</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3306</span><span style="color:#24292E;"> </span><span style="color:#032F62;">端口映射到宿主机的</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3307</span><span style="color:#24292E;"> </span><span style="color:#032F62;">端口。</span></span>
<span class="line"><span style="color:#6F42C1;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MYSQL_ROOT_PASSWORD=</span><span style="color:#005CC5;">123456</span><span style="color:#032F62;">：初始化</span><span style="color:#24292E;"> </span><span style="color:#032F62;">root</span><span style="color:#24292E;"> </span><span style="color:#032F62;">用户的密码。</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># -e 传递环境变量</span></span></code></pre></div><h2 id="docker镜像原理" tabindex="-1">Docker镜像原理 <a class="header-anchor" href="#docker镜像原理" aria-label="Permalink to &quot;Docker镜像原理&quot;">​</a></h2><p>  Linux文件系统由bootfs和rootfs两部分组成</p><ul><li>bootfs：包含bootloader（引导加载程序）和 kernel（内核）</li><li>rootfs： root文件系统，包含的就是典型 Linux 系统中的/dev，/proc，/bin，/etc等标准目录和文件</li></ul><p>  不同的linux发行版，bootfs基本一样，而rootfs不同，如ubuntu，centos等</p><ul><li>Docker镜像是由特殊的文件系统叠加而成：Docker 镜像本质是一个分层文件系统</li><li>最底端是 bootfs，并使用宿主机的bootfs</li><li>第二层是 root文件系统rootfs,称为base image</li><li>然后再往上可以叠加其他的镜像文件</li><li>统一文件系统（Union File System）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统。-</li><li>一个镜像可以放在另一个镜像的上面。位于下面的镜像称为父镜像，最底部的镜像成为基础镜像。</li><li>当从一个镜像启动容器时，Docker会在最顶层加载一个读写文件系统作为容器 <img src="`+m+`" alt="Image"></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 容器转为镜像</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">commit</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">容器id</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">镜像名称:版本号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 将指定镜像保存成tar归档文件。 -o :输出到的文件</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">save</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-o</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">压缩文件名称</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">镜像名称:版本号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 导入使用 docker save 命令导出的镜像。</span></span>
<span class="line"><span style="color:#768390;"># 参数：</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">--input</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">,</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-i</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">指定导入的文件，代替</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">STDIN。</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">--quiet</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">,</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-q</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">精简输出信息。</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">load</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">–i</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">压缩文件名称</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 容器转为镜像</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器id</span><span style="color:#24292E;"> </span><span style="color:#032F62;">镜像名称:版本号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将指定镜像保存成tar归档文件。 -o :输出到的文件</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">save</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">压缩文件名称</span><span style="color:#24292E;"> </span><span style="color:#032F62;">镜像名称:版本号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 导入使用 docker save 命令导出的镜像。</span></span>
<span class="line"><span style="color:#6A737D;"># 参数：</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">--input</span><span style="color:#24292E;"> </span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">指定导入的文件，代替</span><span style="color:#24292E;"> </span><span style="color:#032F62;">STDIN。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">--quiet</span><span style="color:#24292E;"> </span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">精简输出信息。</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">load</span><span style="color:#24292E;"> </span><span style="color:#032F62;">–i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">压缩文件名称</span></span></code></pre></div><h2 id="dockerfile" tabindex="-1">DockerFile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;DockerFile&quot;">​</a></h2><p>Dockerfile是一个文本文件</p><ul><li>包含了一条条的指令</li><li>每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像</li><li>对于开发人员：可以为开发团队提供一个完全一致的开发环境</li><li>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了</li><li>对于运维人员：在部署时，可以实现应用的无缝移植</li></ul><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于那个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>用来标明这个dockerfile谁写的</td></tr><tr><td>LABEL</td><td>标签</td><td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [&quot;command&quot; , &quot;param1&quot;,&quot;param2&quot;]</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [&quot;command&quot; , &quot;param1&quot;,&quot;param2&quot;]</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [&quot;目录&quot;]</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 通过dockerfile构建镜像：(最后面有一个点，表示当前路径)</span></span>
<span class="line"><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">bulid</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">–f</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">dockerfile文件路径</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">–t</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">镜像名称:版本</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 通过dockerfile构建镜像：(最后面有一个点，表示当前路径)</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bulid</span><span style="color:#24292E;"> </span><span style="color:#032F62;">–f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dockerfile文件路径</span><span style="color:#24292E;"> </span><span style="color:#032F62;">–t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">镜像名称:版本</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span></span></code></pre></div><h2 id="服务编排" tabindex="-1">服务编排 <a class="header-anchor" href="#服务编排" aria-label="Permalink to &quot;服务编排&quot;">​</a></h2><p>  微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停，维护的工作量会很大。</p><p>  服务编排：按照一定的业务规则批量管理容器</p><h3 id="docker-compose" tabindex="-1">Docker Compose <a class="header-anchor" href="#docker-compose" aria-label="Permalink to &quot;Docker Compose&quot;">​</a></h3><p>  Docker Compose是一个编排多容器分布式部署的工具，提供命令集管理容器化应用的完整开发周期，包括服务构建，启动和停止。使用步骤：</p><ol><li>利用 Dockerfile 定义运行环境镜像</li><li>使用 docker-compose.yml 定义组成应用的各服务</li><li>运行 docker-compose up 启动应用</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 安装Docker Compose：</span></span>
<span class="line"><span style="color:#768390;"># Compose目前已经完全支持Linux、Mac OS和Windows，在我们安装Compose之前，需要先安装Docker。 </span></span>
<span class="line"><span style="color:#F69D50;">curl</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-L</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">https://github.com/docker/compose/releases/download/1.22.0/docker-compose-\`</span><span style="color:#F69D50;">uname</span><span style="color:#96D0FF;"> </span><span style="color:#6CB6FF;">-s</span><span style="color:#96D0FF;">\`</span><span style="color:#F69D50;">-</span><span style="color:#96D0FF;">\`</span><span style="color:#F69D50;">uname</span><span style="color:#96D0FF;"> </span><span style="color:#6CB6FF;">-m</span><span style="color:#96D0FF;">\`</span><span style="color:#ADBAC7;"> </span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">-o</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">/usr/local/bin/docker-compose</span></span>
<span class="line"><span style="color:#768390;"># 设置文件可执行权限 </span></span>
<span class="line"><span style="color:#F69D50;">chmod</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">+x</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">/usr/local/bin/docker-compose</span></span>
<span class="line"><span style="color:#768390;"># 查看版本信息 </span></span>
<span class="line"><span style="color:#F69D50;">docker-compose</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-version</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 卸载Docker Compose：</span></span>
<span class="line"><span style="color:#768390;"># 二进制包方式安装的，删除二进制文件即可</span></span>
<span class="line"><span style="color:#F69D50;">rm</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">/usr/local/bin/docker-compose</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 安装Docker Compose：</span></span>
<span class="line"><span style="color:#6A737D;"># Compose目前已经完全支持Linux、Mac OS和Windows，在我们安装Compose之前，需要先安装Docker。 </span></span>
<span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-L</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/docker/compose/releases/download/1.22.0/docker-compose-\`</span><span style="color:#6F42C1;">uname</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-s</span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">-</span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">uname</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">-m</span><span style="color:#032F62;">\`</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/bin/docker-compose</span></span>
<span class="line"><span style="color:#6A737D;"># 设置文件可执行权限 </span></span>
<span class="line"><span style="color:#6F42C1;">chmod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/bin/docker-compose</span></span>
<span class="line"><span style="color:#6A737D;"># 查看版本信息 </span></span>
<span class="line"><span style="color:#6F42C1;">docker-compose</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-version</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 卸载Docker Compose：</span></span>
<span class="line"><span style="color:#6A737D;"># 二进制包方式安装的，删除二进制文件即可</span></span>
<span class="line"><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/bin/docker-compose</span></span></code></pre></div><h2 id="docker私有仓库" tabindex="-1">Docker私有仓库 <a class="header-anchor" href="#docker私有仓库" aria-label="Permalink to &quot;Docker私有仓库&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 私有仓库搭建：</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 1、拉取私有仓库镜像 </span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">pull</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">registry</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 2、启动私有仓库容器 </span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">run</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-id</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">--name=registry</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-p</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">5000</span><span style="color:#96D0FF;">:5000</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">registry</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 3、打开浏览器 输入地址http://私有仓库服务器ip:5000/v2/_catalog，看到{&quot;repositories&quot;:[]} 表示私有仓库 搭建成功</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 4、修改daemon.json   </span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">vim</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">/etc/docker/daemon.json</span><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 在上述文件中添加一个key，保存退出。此步用于让 docker 信任私有仓库地址；注意将私有仓库服务器ip修改为自己私有仓库服务器真实ip </span></span>
<span class="line"><span style="color:#ADBAC7;">        {</span><span style="color:#F69D50;">&quot;insecure-registries&quot;</span><span style="color:#6CB6FF;">:</span><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">&quot;私有仓库服务器ip:5000&quot;</span><span style="color:#F69D50;">]}</span><span style="color:#ADBAC7;"> </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 5、重启docker 服务 </span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">systemctl</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">restart</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">docker</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">start</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">registry</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 将镜像上传至私有仓库</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 1、标记镜像为私有仓库的镜像     </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">tag</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">centos:7</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">私有仓库服务器IP:5000/centos:7</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 2、上传标记的镜像     </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">push</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">私有仓库服务器IP:5000/centos:7</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#768390;"># 从私有仓库拉取镜像</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">#拉取镜像 </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">docker</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">pull</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">私有仓库服务器ip:5000/centos:7</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 私有仓库搭建：</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 1、拉取私有仓库镜像 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">registry</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 2、启动私有仓库容器 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-id</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name=registry</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5000</span><span style="color:#032F62;">:5000</span><span style="color:#24292E;"> </span><span style="color:#032F62;">registry</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 3、打开浏览器 输入地址http://私有仓库服务器ip:5000/v2/_catalog，看到{&quot;repositories&quot;:[]} 表示私有仓库 搭建成功</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 4、修改daemon.json   </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">vim</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/docker/daemon.json</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 在上述文件中添加一个key，保存退出。此步用于让 docker 信任私有仓库地址；注意将私有仓库服务器ip修改为自己私有仓库服务器真实ip </span></span>
<span class="line"><span style="color:#24292E;">        {</span><span style="color:#6F42C1;">&quot;insecure-registries&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">&quot;私有仓库服务器ip:5000&quot;</span><span style="color:#6F42C1;">]}</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 5、重启docker 服务 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">systemctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">restart</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">registry</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将镜像上传至私有仓库</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 1、标记镜像为私有仓库的镜像     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tag</span><span style="color:#24292E;"> </span><span style="color:#032F62;">centos:7</span><span style="color:#24292E;"> </span><span style="color:#032F62;">私有仓库服务器IP:5000/centos:7</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 2、上传标记的镜像     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#032F62;">私有仓库服务器IP:5000/centos:7</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#6A737D;"># 从私有仓库拉取镜像</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#拉取镜像 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">私有仓库服务器ip:5000/centos:7</span></span></code></pre></div>`,49);function f(s,q,_,P,x,O){const o=c,e=r("ClientOnly");return l(),y("div",null,[g,i(e,null,{default:F(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),A(o,{key:0,article:s.$frontmatter},null,8,["article"])):C("",!0)]}),_:1}),v])}const R=t(b,[["render",f]]);export{T as __pageData,R as default};
