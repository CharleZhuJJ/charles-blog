import{_ as n}from"./chunks/ArticleMetadata.9dfa2fc3.js";import{_ as r,D as c,o as a,c as d,G as h,B as _,z as l,a as m,R as p,A as u,C as g}from"./chunks/framework.e2a84f7d.js";const S="/assets/SessionMechanism.c60e811e.png",f="/assets/SignOnStatus.08f650e9.png",b="/assets/SingleSignOn.3d10f85a.png",q="/assets/SignOff.adba8035.png",O="/assets/SingleSignOnDeployment.41836a7e.png",B=JSON.parse('{"title":"单点登陆","description":"","frontmatter":{},"headers":[],"relativePath":"md/distributed/SingleSignOn.md","filePath":"md/distributed/SingleSignOn.md","lastUpdated":1688441607000}'),k={name:"md/distributed/SingleSignOn.md"},P=l("h1",{id:"单点登陆",tabindex:"-1"},[m("单点登陆 "),l("a",{class:"header-anchor",href:"#单点登陆","aria-label":'Permalink to "单点登陆"'},"​")],-1),x=p('<h2 id="单系统登陆" tabindex="-1">单系统登陆 <a class="header-anchor" href="#单系统登陆" aria-label="Permalink to &quot;单系统登陆&quot;">​</a></h2><h3 id="_1、会话机制" tabindex="-1">1、会话机制 <a class="header-anchor" href="#_1、会话机制" aria-label="Permalink to &quot;1、会话机制&quot;">​</a></h3><p>  浏览器第一次请求服务器，服务器创建一个会话，并将会话的id作为响应的一部分发送给浏览器，浏览器存储会话id，并在后续第二次和第三次请求中带上会话id，服务器取得请求中的会话id就知道是不是同一个用户了，这个过程用下图说明，后续请求与第一次请求产生了关联。 <img src="'+S+'" alt="SessionMechanism"></p><h3 id="_2、登陆状态" tabindex="-1">2、登陆状态 <a class="header-anchor" href="#_2、登陆状态" aria-label="Permalink to &quot;2、登陆状态&quot;">​</a></h3><p>  浏览器第一次请求服务器需要输入用户名与密码验证身份，服务器拿到用户名密码去数据库比对，正确的话说明当前持有这个会话的用户是合法用户，应该将这个会话标记为“已授权”或者“已登录”等等之类的状态，既然是会话的状态，自然要保存在会话对象中，tomcat在会话对象中设置登录状态如下。 <img src="'+f+'" alt="SignOnStatus"></p><h2 id="单点登陆-1" tabindex="-1">单点登陆 <a class="header-anchor" href="#单点登陆-1" aria-label="Permalink to &quot;单点登陆&quot;">​</a></h2><p>  单点登录全称Single Sign On（以下简称SSO），是指在多系统应用群中登录一个系统，便可在其他所有系统中得到授权而无需再次登录，包括单点登录与单点注销两部分。</p><h3 id="_1、登陆" tabindex="-1">1、登陆 <a class="header-anchor" href="#_1、登陆" aria-label="Permalink to &quot;1、登陆&quot;">​</a></h3><p>  相比于单系统登录，sso需要一个独立的认证中心，只有认证中心能接受用户的用户名密码等安全信息，其他系统不提供登录入口，只接受认证中心的间接授权。间接授权通过令牌实现，sso认证中心验证用户的用户名密码没问题，创建授权令牌，在接下来的跳转过程中，授权令牌作为参数发送给各个子系统，子系统拿到令牌，即得到了授权，可以借此创建局部会话，局部会话登录方式与单系统的登录方式相同。这个过程，也就是单点登录的原理。 <img src="'+b+'" alt="SingleSignOn"></p><ol><li>用户访问系统1的受保护资源，系统1发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</li><li>sso认证中心发现用户未登录，将用户引导至登录页面</li><li>用户输入用户名密码提交登录申请</li><li>sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权令牌</li><li>sso认证中心带着令牌跳转会最初的请求地址（系统1）</li><li>系统1拿到令牌，去sso认证中心校验令牌是否有效</li><li>sso认证中心校验令牌，返回有效，注册系统1</li><li>系统1使用该令牌创建与用户的会话，称为局部会话，返回受保护资源</li><li>用户访问系统2的受保护资源</li><li>系统2发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</li><li>sso认证中心发现用户已登录，跳转回系统2的地址，并附上令牌</li><li>系统2拿到令牌，去sso认证中心校验令牌是否有效</li><li>sso认证中心校验令牌，返回有效，注册系统2</li><li>系统2使用该令牌创建与用户的局部会话，返回受保护资源</li></ol><h3 id="_2、注销" tabindex="-1">2、注销 <a class="header-anchor" href="#_2、注销" aria-label="Permalink to &quot;2、注销&quot;">​</a></h3><p>  在一个子系统中注销，所有子系统的会话都将被销毁 <img src="'+q+'" alt="SignOff"></p><p>  sso认证中心一直监听全局会话的状态，一旦全局会话销毁，监听器将通知所有注册系统执行注销操作</p><ol><li>用户向系统1发起注销请求</li><li>系统1根据用户与系统1建立的会话id拿到令牌，向sso认证中心发起注销请求</li><li>sso认证中心校验令牌有效，销毁全局会话，同时取出所有用此令牌注册的系统地址</li><li>sso认证中心向所有注册系统发起注销请求</li><li>各注册系统接收sso认证中心的注销请求，销毁局部会话</li><li>sso认证中心引导用户至登录页面</li></ol><h2 id="单点登陆部署图" tabindex="-1">单点登陆部署图 <a class="header-anchor" href="#单点登陆部署图" aria-label="Permalink to &quot;单点登陆部署图&quot;">​</a></h2><p>  单点登录涉及sso认证中心与众子系统，子系统与sso认证中心需要通信以交换令牌、校验令牌及发起注销请求，因而子系统必须集成sso的客户端，sso认证中心则是sso服务端，整个单点登录过程实质是sso客户端与服务端通信的过程 <img src="'+O+'" alt="SingleSignOnDeployment"></p><h3 id="sso-client实现的功能" tabindex="-1">sso-client实现的功能 <a class="header-anchor" href="#sso-client实现的功能" aria-label="Permalink to &quot;sso-client实现的功能&quot;">​</a></h3><ol><li>拦截子系统未登录用户请求，跳转至sso认证中心</li><li>接收并存储sso认证中心发送的令牌</li><li>与sso-server通信，校验令牌的有效性</li><li>建立局部会话</li><li>拦截用户注销请求，向sso认证中心发送注销请求</li><li>接收sso认证中心发出的注销请求，销毁局部会话</li></ol><h3 id="sso-server实现的功能" tabindex="-1">sso-server实现的功能 <a class="header-anchor" href="#sso-server实现的功能" aria-label="Permalink to &quot;sso-server实现的功能&quot;">​</a></h3><ol><li>验证用户的登录信息</li><li>创建全局会话</li><li>创建授权令牌</li><li>与sso-client通信发送令牌</li><li>校验sso-client令牌有效性</li><li>系统注册</li><li>接收sso-client注销请求，注销所有会话</li></ol>',20);function v(s,C,N,T,V,$){const t=n,o=c("ClientOnly");return a(),d("div",null,[P,h(o,null,{default:_(()=>{var i,e;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((e=s.$frontmatter)==null?void 0:e.showArticleMetadata)??!0)?(a(),u(t,{key:0,article:s.$frontmatter},null,8,["article"])):g("",!0)]}),_:1}),x])}const D=r(k,[["render",v]]);export{B as __pageData,D as default};
