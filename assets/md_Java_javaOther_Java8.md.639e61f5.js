import{_ as e}from"./chunks/ArticleMetadata.4c626a83.js";import{_ as r,D as c,o as l,c as y,G as A,B as i,z as p,a as D,R as C,A as B,C as F}from"./chunks/framework.ef995079.js";const u="/charles-blog/assets/Map.b009b8ab.png",E="/charles-blog/assets/FlatMap.4eee575b.png",j=JSON.parse('{"title":"Java8","description":"","frontmatter":{},"headers":[],"relativePath":"md/Java/javaOther/Java8.md","filePath":"md/Java/javaOther/Java8.md","lastUpdated":1688457292000}'),d={name:"md/Java/javaOther/Java8.md"},m=p("h1",{id:"java8",tabindex:"-1"},[D("Java8 "),p("a",{class:"header-anchor",href:"#java8","aria-label":'Permalink to "Java8"'},"​")],-1),g=C(`<h2 id="函数式接口" tabindex="-1">函数式接口 <a class="header-anchor" href="#函数式接口" aria-label="Permalink to &quot;函数式接口&quot;">​</a></h2><p>  函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。函数式接口可以被隐式转换为 lambda 表达式。允许把函数作为一个方法的参数（函数作为参数传递进方法中）</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Java8Tester</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">   </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">(String </span><span style="color:#F69D50;">args</span><span style="color:#ADBAC7;">[]){</span></span>
<span class="line"><span style="color:#ADBAC7;">      Java8Tester</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">tester</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Java8Tester</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">      MathOperation</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">addition</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> a, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> b) </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> a </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> b;</span></span>
<span class="line"><span style="color:#ADBAC7;">      System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;10 + 5 = &quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> tester.</span><span style="color:#DCBDFB;">operate</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">, addition));</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">//结果：10 + 5 = 15</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">   </span><span style="color:#F47067;">interface</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MathOperation</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">operation</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">a</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">b</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">   </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">operate</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">a</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">b</span><span style="color:#ADBAC7;">, MathOperation </span><span style="color:#F69D50;">mathOperation</span><span style="color:#ADBAC7;">){</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> mathOperation.</span><span style="color:#DCBDFB;">operation</span><span style="color:#ADBAC7;">(a, b);</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Java8Tester</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">args</span><span style="color:#24292E;">[]){</span></span>
<span class="line"><span style="color:#24292E;">      Java8Tester tester </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Java8Tester</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      MathOperation addition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;10 + 5 = &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> tester.</span><span style="color:#6F42C1;">operate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, addition));</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//结果：10 + 5 = 15</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MathOperation</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">operation</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">operate</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">, MathOperation </span><span style="color:#E36209;">mathOperation</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mathOperation.</span><span style="color:#6F42C1;">operation</span><span style="color:#24292E;">(a, b);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="stream" tabindex="-1">Stream <a class="header-anchor" href="#stream" aria-label="Permalink to &quot;Stream&quot;">​</a></h2><p>  以一种声明的方式处理数据。将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。</p><h3 id="_1、生成流" tabindex="-1">1、生成流 <a class="header-anchor" href="#_1、生成流" aria-label="Permalink to &quot;1、生成流&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">List</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">String</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">strings</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Arrays.</span><span style="color:#DCBDFB;">asList</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;abc&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;bc&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;efg&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;abcd&quot;</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;jkl&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">List</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">String</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">filtered</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> strings.</span><span style="color:#DCBDFB;">stream</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">filter</span><span style="color:#ADBAC7;">(string</span><span style="color:#F47067;">-&gt;!</span><span style="color:#ADBAC7;">string.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">()).</span><span style="color:#DCBDFB;">collect</span><span style="color:#ADBAC7;">(Collectors.</span><span style="color:#DCBDFB;">toList</span><span style="color:#ADBAC7;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; strings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;bc&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;efg&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;abcd&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;jkl&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; filtered </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> strings.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(string</span><span style="color:#D73A49;">-&gt;!</span><span style="color:#24292E;">string.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span></code></pre></div><h3 id="_2、map-方法" tabindex="-1">2、map 方法 <a class="header-anchor" href="#_2、map-方法" aria-label="Permalink to &quot;2、map 方法&quot;">​</a></h3><p>  用于映射每个元素到对应的结果（map 方法用于映射每个元素到对应的结果，一对一。）</p><h4 id="map" tabindex="-1">map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;map&quot;">​</a></h4><p>  map 会将每一条输入映射为一个新对象。{苹果，梨子}.map(去皮） = {去皮苹果，去皮梨子} 其中： “去皮”函数的类型为：A =&gt; B</p><p><img src="`+u+`" alt="map"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 例子：使用 map 输出了元素对应的平方数：</span></span>
<span class="line"><span style="color:#ADBAC7;">List</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">numbers</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Arrays.</span><span style="color:#DCBDFB;">asList</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#768390;">// 获取对应的平方数</span></span>
<span class="line"><span style="color:#ADBAC7;">List</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">squaresList</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> numbers.</span><span style="color:#DCBDFB;">stream</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">map</span><span style="color:#ADBAC7;">( i </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> i</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">i).</span><span style="color:#DCBDFB;">distinct</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">collect</span><span style="color:#ADBAC7;">(Collectors.</span><span style="color:#DCBDFB;">toList</span><span style="color:#ADBAC7;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 例子：使用 map 输出了元素对应的平方数：</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; numbers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 获取对应的平方数</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; squaresList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> numbers.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">( i </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">i).</span><span style="color:#6F42C1;">distinct</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span></code></pre></div><p>  对于 Stream 中包含的元素使用给定的转换函数进行转换操作，新生成的 Stream 只包含转换生成的元素。这个方法有三个对于原始类型的变种方法，分别是：mapToInt，mapToLong 和 mapToDouble。这三个方法也比较好理解，比如 mapToInt 就是把原始 Stream 转换成一个新的 Stream，这个新生成的 Stream 中的元素都是 int 类型。之所以会有这样三个变种方法，可以免除自动装箱/拆箱的额外消耗；</p><h4 id="flatmap" tabindex="-1">flatMap <a class="header-anchor" href="#flatmap" aria-label="Permalink to &quot;flatMap&quot;">​</a></h4><p>  flat 是扁平的意思。它把数组流中的每一个值，使用所提供的函数执行一遍，一一对应。得到元素相同的数组流。只不过，里面的元素也是一个子数组流。把这些子数组合并成一个数组以后，元素个数大概率会和原数组流的个数不同。</p><p>  flatMap 包含两个操作：会将每一个输入对象输入映射为一个新集合，然后把这些新集合连成一个大集合。 {苹果，梨子}.flatMap(切碎) = {苹果碎片 1，苹果碎片 2，梨子碎片 1，梨子碎片 2} 其中： “切碎”函数的类型为： A =&gt; List&lt;B&gt;</p><p><img src="`+E+`" alt="map"></p><h3 id="_3、filter-方法" tabindex="-1">3、filter 方法 <a class="header-anchor" href="#_3、filter-方法" aria-label="Permalink to &quot;3、filter 方法&quot;">​</a></h3><p>  用于通过设置的条件过滤出元素</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 使用 filter 方法过滤出空字符串</span></span>
<span class="line"><span style="color:#ADBAC7;">List</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">String</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">strings </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Arrays.</span><span style="color:#DCBDFB;">asList</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;abc&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;bc&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;efg&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;abcd&quot;</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;jkl&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#768390;">// 获取空字符串的数量</span></span>
<span class="line"><span style="color:#F47067;">long</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">count</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> strings.</span><span style="color:#DCBDFB;">stream</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">filter</span><span style="color:#ADBAC7;">(string </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> string.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">()).</span><span style="color:#DCBDFB;">count</span><span style="color:#ADBAC7;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用 filter 方法过滤出空字符串</span></span>
<span class="line"><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">strings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;bc&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;efg&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;abcd&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;jkl&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 获取空字符串的数量</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> strings.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(string </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> string.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">();</span></span></code></pre></div><h3 id="_4、limit" tabindex="-1">4、limit <a class="header-anchor" href="#_4、limit" aria-label="Permalink to &quot;4、limit&quot;">​</a></h3><p>  方法用于获取指定数量的流。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 使用 limit 方法打印出 10 条数据：</span></span>
<span class="line"><span style="color:#ADBAC7;">Random</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">random</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Random</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">random.</span><span style="color:#DCBDFB;">ints</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">limit</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">).</span><span style="color:#DCBDFB;">forEach</span><span style="color:#ADBAC7;">(System.out</span><span style="color:#F47067;">::</span><span style="color:#ADBAC7;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用 limit 方法打印出 10 条数据：</span></span>
<span class="line"><span style="color:#24292E;">Random random </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Random</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">random.</span><span style="color:#6F42C1;">ints</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">limit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><h3 id="_5、collectors-类" tabindex="-1">5、Collectors 类 <a class="header-anchor" href="#_5、collectors-类" aria-label="Permalink to &quot;5、Collectors 类&quot;">​</a></h3><p>  实现了很多归约操作，例如将流转换成集合和聚合元素。Collectors 可用于返回列表或字符串</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">List</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">String</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">strings </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Arrays.</span><span style="color:#DCBDFB;">asList</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;abc&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;bc&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;efg&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;abcd&quot;</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;jkl&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">List</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">String</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">filtered</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> strings.</span><span style="color:#DCBDFB;">stream</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">filter</span><span style="color:#ADBAC7;">(string </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">string.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">()).</span><span style="color:#DCBDFB;">collect</span><span style="color:#ADBAC7;">(Collectors.</span><span style="color:#DCBDFB;">toList</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;筛选列表: &quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> filtered);</span></span>
<span class="line"><span style="color:#ADBAC7;">String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">mergedString</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> strings.</span><span style="color:#DCBDFB;">stream</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">filter</span><span style="color:#ADBAC7;">(string </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">string.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">()).</span><span style="color:#DCBDFB;">collect</span><span style="color:#ADBAC7;">(Collectors.</span><span style="color:#DCBDFB;">joining</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;, &quot;</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;合并字符串: &quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> mergedString);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">strings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;bc&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;efg&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;abcd&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;jkl&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; filtered </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> strings.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(string </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">string.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;筛选列表: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> filtered);</span></span>
<span class="line"><span style="color:#24292E;">String mergedString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> strings.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(string </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">string.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">joining</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;, &quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;合并字符串: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> mergedString);</span></span></code></pre></div><h3 id="_6、统计" tabindex="-1">6、统计 <a class="header-anchor" href="#_6、统计" aria-label="Permalink to &quot;6、统计&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">List</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">numbers</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Arrays.</span><span style="color:#DCBDFB;">asList</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">IntSummaryStatistics</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">stats</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> numbers.</span><span style="color:#DCBDFB;">stream</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">mapToInt</span><span style="color:#ADBAC7;">((x) </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> x).</span><span style="color:#DCBDFB;">summaryStatistics</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;列表中最大的数 : &quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> stats.</span><span style="color:#DCBDFB;">getMax</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;列表中最小的数 : &quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> stats.</span><span style="color:#DCBDFB;">getMin</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;所有数之和 : &quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> stats.</span><span style="color:#DCBDFB;">getSum</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;平均数 : &quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> stats.</span><span style="color:#DCBDFB;">getAverage</span><span style="color:#ADBAC7;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; numbers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">IntSummaryStatistics stats </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> numbers.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">mapToInt</span><span style="color:#24292E;">((x) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> x).</span><span style="color:#6F42C1;">summaryStatistics</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;列表中最大的数 : &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> stats.</span><span style="color:#6F42C1;">getMax</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;列表中最小的数 : &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> stats.</span><span style="color:#6F42C1;">getMin</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;所有数之和 : &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> stats.</span><span style="color:#6F42C1;">getSum</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;平均数 : &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> stats.</span><span style="color:#6F42C1;">getAverage</span><span style="color:#24292E;">());</span></span></code></pre></div><h3 id="_7、peek" tabindex="-1">7、peek <a class="header-anchor" href="#_7、peek" aria-label="Permalink to &quot;7、peek&quot;">​</a></h3><p>  peek 操作接收的是一个 Consumer&lt;T&gt; 函数。顾名思义 peek 操作会按照 Consumer&lt;T&gt; 函数提供的逻辑去消费流中的每一个元素，同时有可能改变元素内部的一些属性。（与 map 最大的区别是它没有返回值。）</p><p>  peek 接收一个 Consumer，而 map 接收一个 Function。</p><p>  Consumer 是没有返回值的，它只是对 Stream 中的元素进行某些操作，但是操作之后的数据并不返回到 Stream 中，所以 Stream 中的元素还是原来的元素。</p><p>  而 Function 是有返回值的，这意味着对于 Stream 的元素的所有操作都会作为新的结果返回到 Stream 中。</p><p>  这就是为什么 peek String 不会发生变化而 peek Object 会发送变化的原因。</p><h3 id="_8、reduce" tabindex="-1">8、reduce <a class="header-anchor" href="#_8、reduce" aria-label="Permalink to &quot;8、reduce&quot;">​</a></h3><p>  主要作用是把 Stream 元素组合起来进行操作</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">List</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">numList</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Arrays.</span><span style="color:#DCBDFB;">asList</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">result</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> numList.</span><span style="color:#DCBDFB;">stream</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">reduce</span><span style="color:#ADBAC7;">((a,b) </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">  System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;a=&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> a </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;,b=&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> b);</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> a </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> b;</span></span>
<span class="line"><span style="color:#ADBAC7;">} ).</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(result);</span></span>
<span class="line"><span style="color:#768390;">//a=1,b=2</span></span>
<span class="line"><span style="color:#768390;">//a=3,b=3</span></span>
<span class="line"><span style="color:#768390;">//a=6,b=4</span></span>
<span class="line"><span style="color:#768390;">//a=10,b=5</span></span>
<span class="line"><span style="color:#768390;">// 15</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; numList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> numList.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((a,b) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;,b=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">} ).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#6A737D;">//a=1,b=2</span></span>
<span class="line"><span style="color:#6A737D;">//a=3,b=3</span></span>
<span class="line"><span style="color:#6A737D;">//a=6,b=4</span></span>
<span class="line"><span style="color:#6A737D;">//a=10,b=5</span></span>
<span class="line"><span style="color:#6A737D;">// 15</span></span></code></pre></div><h2 id="optional" tabindex="-1">Optional <a class="header-anchor" href="#optional" aria-label="Permalink to &quot;Optional&quot;">​</a></h2><p>  optional 是个容器：它可以保存类型 T 的值，或者仅仅保存 null。Optional 提供很多有用的方法，这样我们就不用显式进行空值检测。Optional 类的引入很好的解决空指针异常。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Java8Tester</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">   </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">(String </span><span style="color:#F69D50;">args</span><span style="color:#ADBAC7;">[]){</span></span>
<span class="line"><span style="color:#ADBAC7;">      Java8Tester</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">java8Tester</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Java8Tester</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">      Integer</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">value1</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">      Integer</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">value2</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Integer</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// Optional.ofNullable - 允许传递为 null 参数</span></span>
<span class="line"><span style="color:#ADBAC7;">      Optional</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">a</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Optional.</span><span style="color:#DCBDFB;">ofNullable</span><span style="color:#ADBAC7;">(value1);</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// Optional.of - 如果传递的参数是 null，抛出异常 NullPointerException</span></span>
<span class="line"><span style="color:#ADBAC7;">      Optional</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">b</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Optional.</span><span style="color:#DCBDFB;">of</span><span style="color:#ADBAC7;">(value2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">      System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(java8Tester.</span><span style="color:#DCBDFB;">sum</span><span style="color:#ADBAC7;">(a,b));</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">   </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Integer </span><span style="color:#DCBDFB;">sum</span><span style="color:#ADBAC7;">(Optional&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">a</span><span style="color:#ADBAC7;">, Optional&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">b</span><span style="color:#ADBAC7;">){</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// Optional.isPresent - 判断值是否存在</span></span>
<span class="line"><span style="color:#ADBAC7;">      System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;第一个参数值存在: &quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> a.</span><span style="color:#DCBDFB;">isPresent</span><span style="color:#ADBAC7;">());  </span><span style="color:#768390;">//false</span></span>
<span class="line"><span style="color:#ADBAC7;">      System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;第二个参数值存在: &quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> b.</span><span style="color:#DCBDFB;">isPresent</span><span style="color:#ADBAC7;">());  </span><span style="color:#768390;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// Optional.orElse - 如果值存在，返回它，否则返回默认值</span></span>
<span class="line"><span style="color:#ADBAC7;">      Integer</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">value1</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> a.</span><span style="color:#DCBDFB;">orElse</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Integer</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">//Optional.get - 获取值，值需要存在</span></span>
<span class="line"><span style="color:#ADBAC7;">      Integer</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">value2</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> b.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> value1 </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> value2;  </span><span style="color:#768390;">//10</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Java8Tester</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">args</span><span style="color:#24292E;">[]){</span></span>
<span class="line"><span style="color:#24292E;">      Java8Tester java8Tester </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Java8Tester</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      Integer value1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      Integer value2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Integer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Optional.ofNullable - 允许传递为 null 参数</span></span>
<span class="line"><span style="color:#24292E;">      Optional&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(value1);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Optional.of - 如果传递的参数是 null，抛出异常 NullPointerException</span></span>
<span class="line"><span style="color:#24292E;">      Optional&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(value2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(java8Tester.</span><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">(a,b));</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Integer </span><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">(Optional&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, Optional&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">b</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Optional.isPresent - 判断值是否存在</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;第一个参数值存在: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">());  </span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;第二个参数值存在: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">());  </span><span style="color:#6A737D;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Optional.orElse - 如果值存在，返回它，否则返回默认值</span></span>
<span class="line"><span style="color:#24292E;">      Integer value1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Integer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//Optional.get - 获取值，值需要存在</span></span>
<span class="line"><span style="color:#24292E;">      Integer value2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> value2;  </span><span style="color:#6A737D;">//10</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="comparator-comparing" tabindex="-1">Comparator.comparing <a class="header-anchor" href="#comparator-comparing" aria-label="Permalink to &quot;Comparator.comparing&quot;">​</a></h2><h3 id="_1、comparator-comparing-参数-1" tabindex="-1">1、Comparator.comparing(参数 1) <a class="header-anchor" href="#_1、comparator-comparing-参数-1" aria-label="Permalink to &quot;1、Comparator.comparing(参数 1)&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">Comparator.</span><span style="color:#DCBDFB;">comparing</span><span style="color:#ADBAC7;">(Employee</span><span style="color:#F47067;">::</span><span style="color:#ADBAC7;">getName)   </span><span style="color:#F47067;">--</span><span style="color:#ADBAC7;">等价</span></span>
<span class="line"><span style="color:#ADBAC7;">(o1, o2) </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> o1.</span><span style="color:#DCBDFB;">getName</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">compareTo</span><span style="color:#ADBAC7;">(o2.</span><span style="color:#DCBDFB;">getName</span><span style="color:#ADBAC7;">())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Comparator.</span><span style="color:#6F42C1;">comparing</span><span style="color:#24292E;">(Employee</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getName)   </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">等价</span></span>
<span class="line"><span style="color:#24292E;">(o1, o2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> o1.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(o2.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">())</span></span></code></pre></div><h3 id="_2、comparator-comparing-参数-1-参数-2" tabindex="-1">2、Comparator.comparing(参数 1，参数 2) <a class="header-anchor" href="#_2、comparator-comparing-参数-1-参数-2" aria-label="Permalink to &quot;2、Comparator.comparing(参数 1，参数 2)&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">Comparator.</span><span style="color:#DCBDFB;">comparing</span><span style="color:#ADBAC7;">(Employee</span><span style="color:#F47067;">::</span><span style="color:#ADBAC7;">getName, (s1, s2) </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> {</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> s2.</span><span style="color:#DCBDFB;">compareTo</span><span style="color:#ADBAC7;">(s1);})  </span><span style="color:#F47067;">--</span><span style="color:#ADBAC7;">自定义比较器</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Comparator.</span><span style="color:#6F42C1;">comparing</span><span style="color:#24292E;">(Employee</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getName, (s1, s2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s2.</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(s1);})  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">自定义比较器</span></span></code></pre></div><h3 id="_3、comparator-reversed" tabindex="-1">3、Comparator.reversed <a class="header-anchor" href="#_3、comparator-reversed" aria-label="Permalink to &quot;3、Comparator.reversed&quot;">​</a></h3><p>  返回相反的排序规则</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">Comparator.</span><span style="color:#DCBDFB;">comparing</span><span style="color:#ADBAC7;">(Employee</span><span style="color:#F47067;">::</span><span style="color:#ADBAC7;">getName).</span><span style="color:#DCBDFB;">reversed</span><span style="color:#ADBAC7;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Comparator.</span><span style="color:#6F42C1;">comparing</span><span style="color:#24292E;">(Employee</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getName).</span><span style="color:#6F42C1;">reversed</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="_4、comparator-thencomparing" tabindex="-1">4、Comparator.thenComparing <a class="header-anchor" href="#_4、comparator-thencomparing" aria-label="Permalink to &quot;4、Comparator.thenComparing&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 例子：首先使用 name 排序，紧接着在使用ege 排序</span></span>
<span class="line"><span style="color:#ADBAC7;">Comparator.</span><span style="color:#DCBDFB;">comparing</span><span style="color:#ADBAC7;">(Employee</span><span style="color:#F47067;">::</span><span style="color:#ADBAC7;">getAge).</span><span style="color:#DCBDFB;">thenComparing</span><span style="color:#ADBAC7;">(Employee</span><span style="color:#F47067;">::</span><span style="color:#ADBAC7;">getName)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 例子：首先使用 name 排序，紧接着在使用ege 排序</span></span>
<span class="line"><span style="color:#24292E;">Comparator.</span><span style="color:#6F42C1;">comparing</span><span style="color:#24292E;">(Employee</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getAge).</span><span style="color:#6F42C1;">thenComparing</span><span style="color:#24292E;">(Employee</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getName)</span></span></code></pre></div>`,51);function h(s,b,q,v,k,f){const o=e,t=c("ClientOnly");return l(),y("div",null,[m,A(t,null,{default:i(()=>{var a,n;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=s.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(l(),B(o,{key:0,article:s.$frontmatter},null,8,["article"])):F("",!0)]}),_:1}),g])}const L=r(d,[["render",h]]);export{j as __pageData,L as default};
